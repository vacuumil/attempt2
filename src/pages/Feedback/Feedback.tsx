// src/pages/Feedback/Feedback.tsx
import React, { useState } from 'react';
import styled from 'styled-components';

const FeedbackContainer = styled.div`
  min-height: 100vh;
  background: #0a192f;
  color: #e6f1ff;
  padding: 100px 2rem 2rem;
`;

const FeedbackContent = styled.div`
  max-width: 800px;
  margin: 0 auto;
`;

const Title = styled.h1`
  font-size: 3rem;
  text-align: center;
  margin-bottom: 1rem;
  background: linear-gradient(135deg, #64ffda 0%, #1a6fc4 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
`;

const FeedbackForm = styled.form`
  background: rgba(26, 111, 196, 0.1);
  padding: 2.5rem;
  border-radius: 16px;
  border: 1px solid rgba(26, 111, 196, 0.3);
  margin-top: 2rem;
`;

const FormGroup = styled.div`
  margin-bottom: 1.5rem;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 0.5rem;
  color: #64ffda;
`;

const Input = styled.input`
  width: 100%;
  padding: 1rem;
  background: rgba(10, 25, 47, 0.6);
  border: 1px solid rgba(100, 255, 218, 0.3);
  border-radius: 8px;
  color: #e6f1ff;
  font-size: 1rem;

  &:focus {
    outline: none;
    border-color: #64ffda;
  }
`;

const Select = styled.select`
  width: 100%;
  padding: 1rem;
  background: rgba(10, 25, 47, 0.6);
  border: 1px solid rgba(100, 255, 218, 0.3);
  border-radius: 8px;
  color: #e6f1ff;
  font-size: 1rem;

  &:focus {
    outline: none;
    border-color: #64ffda;
  }

  option {
    background: #0a192f;
    color: #e6f1ff;
  }
`;

const TextArea = styled.textarea`
  width: 100%;
  padding: 1rem;
  background: rgba(10, 25, 47, 0.6);
  border: 1px solid rgba(100, 255, 218, 0.3);
  border-radius: 8px;
  color: #e6f1ff;
  font-size: 1rem;
  min-height: 200px;
  resize: vertical;

  &:focus {
    outline: none;
    border-color: #64ffda;
  }
`;

const RatingContainer = styled.div`
  display: flex;
  gap: 1rem;
  margin: 1rem 0;
  flex-wrap: wrap;
`;

const RatingButton = styled.button<{ selected: boolean }>`
  background: ${props => props.selected ? '#64ffda' : 'rgba(10, 25, 47, 0.6)'};
  color: ${props => props.selected ? '#0a192f' : '#e6f1ff'};
  border: 1px solid ${props => props.selected ? '#64ffda' : 'rgba(100, 255, 218, 0.3)'};
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: ${props => props.selected ? 'bold' : 'normal'};

  &:hover {
    background: #64ffda;
    color: #0a192f;
  }
`;

const SubmitButton = styled.button`
  background: linear-gradient(135deg, #1a6fc4 0%, #64ffda 100%);
  color: white;
  border: none;
  padding: 1rem 2rem;
  border-radius: 8px;
  font-size: 1.1rem;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(100, 255, 218, 0.3);
  }
`;

const FeatureGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin: 1rem 0;
`;

const FeatureCheckbox = styled.label`
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: #8892b0;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 6px;
  transition: all 0.3s ease;

  &:hover {
    background: rgba(100, 255, 218, 0.1);
  }

  input {
    accent-color: #64ffda;
  }
`;

export const Feedback: React.FC = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    type: 'suggestion',
    rating: 0,
    message: '',
    features: [] as string[]
  });

  const featuresList = [
    'VOR –ù–∞–≤–∏–≥–∞—Ü–∏—è',
    '–†–∞—Å—á–µ—Ç –†–ü–ü',
    '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–µ–π',
    '–ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—è',
    '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
    '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.');
    setFormData({
      name: '',
      email: '',
      type: 'suggestion',
      rating: 0,
      message: '',
      features: []
    });
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  const handleRatingClick = (rating: number) => {
    setFormData(prev => ({
      ...prev,
      rating
    }));
  };

  const handleFeatureToggle = (feature: string) => {
    setFormData(prev => ({
      ...prev,
      features: prev.features.includes(feature)
        ? prev.features.filter(f => f !== feature)
        : [...prev.features, feature]
    }));
  };

  return (
    <FeedbackContainer>
      <FeedbackContent>
        <Title>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</Title>
        <p style={{ textAlign: 'center', color: '#8892b0', fontSize: '1.2rem', marginBottom: '3rem' }}>
          –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å AeroTrainer –ª—É—á—à–µ! –ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–µ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.
        </p>

        <FeedbackForm onSubmit={handleSubmit}>
          <FormGroup>
            <Label htmlFor="name">–í–∞—à–µ –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
            <Input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
            />
          </FormGroup>

          <FormGroup>
            <Label htmlFor="email">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
            <Input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
            />
          </FormGroup>

          <FormGroup>
            <Label htmlFor="type">–¢–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</Label>
            <Select
              id="type"
              name="type"
              value={formData.type}
              onChange={handleChange}
            >
              <option value="suggestion">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é</option>
              <option value="praise">–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å</option>
              <option value="complaint">–ñ–∞–ª–æ–±–∞</option>
              <option value="question">–í–æ–ø—Ä–æ—Å</option>
            </Select>
          </FormGroup>

          <FormGroup>
            <Label>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</Label>
            <RatingContainer>
              {[1, 2, 3, 4, 5].map((rating) => (
                <RatingButton
                  key={rating}
                  type="button"
                  selected={formData.rating === rating}
                  onClick={() => handleRatingClick(rating)}
                >
                  {'‚≠ê'.repeat(rating)}
                </RatingButton>
              ))}
            </RatingContainer>
          </FormGroup>

          <FormGroup>
            <Label>–ö–∞–∫–∏–µ –º–æ–¥—É–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
            <FeatureGrid>
              {featuresList.map((feature) => (
                <FeatureCheckbox key={feature}>
                  <input
                    type="checkbox"
                    checked={formData.features.includes(feature)}
                    onChange={() => handleFeatureToggle(feature)}
                  />
                  {feature}
                </FeatureCheckbox>
              ))}
            </FeatureGrid>
          </FormGroup>

          <FormGroup>
            <Label htmlFor="message">–í–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</Label>
            <TextArea
              id="message"
              name="message"
              value={formData.message}
              onChange={handleChange}
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏..."
              required
            />
          </FormGroup>

          <div style={{ textAlign: 'center' }}>
            <SubmitButton type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</SubmitButton>
          </div>
        </FeedbackForm>

        <div style={{ marginTop: '3rem', color: '#8892b0', textAlign: 'center' }}>
          <h3 style={{ color: '#64ffda', marginBottom: '1rem' }}>üí° –ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º —Å –≤–∞—à–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏?</h3>
          <p>‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ä–∫–∞—Ö</p>
          <p>‚Ä¢ –í–∫–ª—é—á–∞–µ–º –ª—É—á—à–∏–µ –∏–¥–µ–∏ –≤ –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</p>
          <p>‚Ä¢ –°–æ–æ–±—â–∞–µ–º –æ–± —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π</p>
        </div>
      </FeedbackContent>
    </FeedbackContainer>
  );
};