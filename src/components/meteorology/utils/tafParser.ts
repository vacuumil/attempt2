// src/components/meteorology/utils/tafParser.ts

export interface TurbulenceInfo {
  intensity: string;
  minAltitude: number;
  maxAltitude: number;
}

export interface IcingInfo {
  intensity: string;
  minAltitude: number;
  maxAltitude: number;
}

export interface TafWind {
  direction: number | 'VRB';
  speed: number;
  gust?: number;
  unit: string;
  variableFrom?: number;
  variableTo?: number;
  isCalm?: boolean;
}

export interface TafVisibility {
  value: number;
  unit: string;
  isCavok: boolean;
  isGreaterThan?: boolean;
  isLessThan?: boolean;
  metersValue?: number;
}

export interface TafCloud {
  coverage: string;
  altitude: number;
  type?: string;
  isCeiling?: boolean;
  isVerticalVisibility?: boolean;
}

export interface TafWeather {
  intensity?: string;
  descriptor?: string;
  phenomena: string[];
  raw: string;
}

export interface TemperatureInfo {
  type: 'max' | 'min';
  value: number;
  time: string;
}

export interface TafForecast {
  type: 'MAIN' | 'BECMG' | 'TEMPO' | 'PROB';
  validity: {
    from: string;
    to: string;
  };
  changeType?: 'BECMG' | 'TEMPO' | 'PROB' | 'FM';
  probability?: number;
  wind?: TafWind;
  visibility?: TafVisibility;
  weather: TafWeather[];
  clouds: TafCloud[];
  turbulence?: TurbulenceInfo;
  icing?: IcingInfo;
  temperature?: TemperatureInfo[];
  raw: string;
}

export interface ParsedTaf {
  icaoCode: string;
  issuanceTime: string;
  validity: {
    from: string;
    to: string;
  };
  forecast: TafForecast[];
  remarks: string[];
  temperature?: TemperatureInfo[];
  raw: string;
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ TAF
 */
export const parseTafTime = (timeString: string): string => {
  if (!timeString) return '';
  
  const cleanTime = timeString.replace('Z', '').trim();
  
  if (cleanTime.length === 6 && /^\d{6}$/.test(cleanTime)) {
    return cleanTime;
  }
  
  if (cleanTime.length === 4 && /^\d{4}$/.test(cleanTime) && parseInt(cleanTime) > 31) {
    return cleanTime + '00';
  }
  
  if (cleanTime.length === 4 && /^\d{4}$/.test(cleanTime) && parseInt(cleanTime) <= 2400) {
    const now = new Date();
    const day = now.getUTCDate().toString().padStart(2, '0');
    return day + cleanTime;
  }
  
  return '';
};

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è
 */
export const parseValidityPeriod = (validityString: string): { from: string; to: string } => {
  console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–∏–æ–¥–∞:', validityString);
  
  if (!validityString || !validityString.includes('/')) {
    const now = new Date();
    const day = now.getUTCDate().toString().padStart(2, '0');
    const hour = now.getUTCHours().toString().padStart(2, '0');
    return { 
      from: day + hour + '00', 
      to: day + ((parseInt(hour) + 24) % 24).toString().padStart(2, '0') + '00' 
    };
  }
  
  const [fromStr, toStr] = validityString.split('/');
  console.log('üìÖ –ß–∞—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥–∞:', { fromStr, toStr });
  
  const fromTime = parseTafTime(fromStr);
  let toTime = parseTafTime(toStr);
  
  console.log('üïí –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:', { fromTime, toTime });
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü
  if (fromTime && toTime) {
    const fromDay = parseInt(fromTime.slice(0, 2));
    let toDay = parseInt(toTime.slice(0, 2));
    
    if (toDay < fromDay) {
      toDay += 31;
      toTime = toDay.toString().padStart(2, '0') + toTime.slice(2);
      console.log('üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü ->', toTime);
    }
  }
  
  const result = {
    from: fromTime || '010000',
    to: toTime || '020000'
  };
  
  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–∏–æ–¥–∞:', result);
  return result;
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –∫–æ–¥–æ–≤
 */
const isWindCode = (code: string): boolean => {
  return /^\d{5}(G\d{1,3})?(KT|MPS|KMH)$/.test(code) || 
         code.startsWith('VRB') || 
         code === '00000KT' || 
         code === '00000MPS';
};

const isVisibilityCode = (code: string): boolean => {
  return code === 'CAVOK' || 
         code === '9999' || 
         /^\d{4}$/.test(code) || 
         /^[PM]\d{4}$/.test(code) || 
         code.endsWith('SM');
};

const isWeatherCode = (code: string): boolean => {
  const weatherCodes = ['RA', 'SN', 'FG', 'BR', 'HZ', 'TS', 'DZ', 'GR', 'GS', 'PL', 'SG', 
                       'IC', 'UP', 'SQ', 'FC', 'DS', 'SS', 'VA', 'PO', 'DU', 'SA', 'MI', 
                       'BC', 'BL', 'DR', 'FZ', 'SH', 'VC', 'NSW'];
  
  return weatherCodes.some(weatherCode => code.includes(weatherCode)) || 
         code.startsWith('+') || code.startsWith('-') || code.startsWith('VC') ||
         code === 'TS' || code === 'SH';
};

const isCloudCode = (code: string): boolean => {
  const cloudCoverages = ['FEW', 'SCT', 'BKN', 'OVC', 'VV', 'SKC', 'CLR', 'NSC', 'NCD'];
  return (cloudCoverages.some(coverage => code.startsWith(coverage)) && /^\D+\d+/.test(code)) ||
         code === 'NSC' || code === 'SKC' || code === 'CLR' || code === 'NCD';
};


/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä TAF
 */
export const parseTafEnhanced = (tafString: string): ParsedTaf => {
  try {
    console.log('üîÑ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ TAF:', tafString);
    
    const normalizedTaf = tafString
      .replace(/\n/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    
    const parsed = parseTafUniversal(normalizedTaf);
    
    if (!parsed.issuanceTime) {
      const now = new Date();
      const day = now.getUTCDate().toString().padStart(2, '0');
      const hour = now.getUTCHours().toString().padStart(2, '0');
      const minute = now.getUTCMinutes().toString().padStart(2, '0');
      parsed.issuanceTime = day + hour + minute;
    }
    
    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
      issuanceTime: parsed.issuanceTime,
      validity: parsed.validity,
      forecastCount: parsed.forecast.length
    });
    
    return parsed;
  } catch (error) {
    console.warn('‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π:', error);
    return parseTafUniversal(tafString);
  }
};

// –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê FM –° –í–†–ï–ú–ï–ù–ï–ú
const parseFmWithTime = (part: string): { time: string; remaining: string } | null => {
  // –§–æ—Ä–º–∞—Ç FMHHmm (–Ω–∞–ø—Ä–∏–º–µ—Ä: FM862888 -> FM 86 28 88)
  const fmMatch = part.match(/^FM(\d{2})(\d{2})(\d{2})$/);
  if (fmMatch) {
    const day = fmMatch[1];
    const hour = fmMatch[2];
    const minute = fmMatch[3];
    return {
      time: day + hour + minute + '00', // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      remaining: ''
    };
  }
  
  // –§–æ—Ä–º–∞—Ç FMHHmm —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: FM862888KT)
  const fmWithDataMatch = part.match(/^FM(\d{2})(\d{2})(\d{2})(.+)$/);
  if (fmWithDataMatch) {
    const day = fmWithDataMatch[1];
    const hour = fmWithDataMatch[2];
    const minute = fmWithDataMatch[3];
    const remaining = fmWithDataMatch[4];
    return {
      time: day + hour + minute + '00',
      remaining: remaining
    };
  }
  
  return null;
};

// –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ß–ò–°–¢–ö–ò –ò –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò TAF
const normalizeTafString = (tafString: string): string => {
  console.log('üßπ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è TAF —Å—Ç—Ä–æ–∫–∏:', tafString);
  
  // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
  let normalized = tafString.replace(/\s+/g, ' ').trim();
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
  normalized = normalized.replace(/(\d{6})Z?(\d)/g, '$1Z $2'); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏
  normalized = normalized.replace(/(\d{4})\/(\d{4})([A-Z])/g, '$1/$2 $3'); // –ü—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –ø–µ—Ä–∏–æ–¥–∞
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º TEMPO/BECMG –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
  normalized = normalized.replace(/(TEMPO|BECMG|PROB\d{2})(\d)/g, '$1 $2');
  
  console.log('‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π TAF:', normalized);
  return normalized;
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä TAF - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø FM
 */
export const parseTafUniversal = (tafString: string): ParsedTaf => {
  console.log('üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ TAF:', tafString);
  
  if (!tafString || tafString.trim().length === 0) {
    throw new Error('–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ TAF');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
  const normalizedTaf = normalizeTafString(tafString);
  const parts = normalizedTaf.split(' ');
  
  const parsed: ParsedTaf = {
    icaoCode: '',
    issuanceTime: '',
    validity: { from: '', to: '' },
    forecast: [],
    remarks: [],
    raw: tafString
  };

  let index = 0;
  let currentForecast: TafForecast | null = null;
  let inRemarks = false;
  const remarks: string[] = [];

  // –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ TAF - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  while (index < parts.length) {
    const part = parts[index];
    if (!part) {
      index++;
      continue;
    }
    
    console.log(`üìã –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ [${index}]:`, part);

    // –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞
    if (!parsed.icaoCode && /^[A-Z]{4}$/.test(part)) {
      parsed.icaoCode = part;
      console.log('üè¢ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞:', parsed.icaoCode);
      index++;
      continue;
    }
    
    // –í—Ä–µ–º—è –≤—ã–ø—É—Å–∫–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
    if (!parsed.issuanceTime && /\d{6}Z?/.test(part)) {
      parsed.issuanceTime = parseTafTime(part);
      console.log('üïí –í—Ä–µ–º—è –≤—ã–ø—É—Å–∫–∞:', parsed.issuanceTime);
      index++;
      continue;
    }
    
    // –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è
    if (!parsed.validity.from && /\d{4}\/\d{4}/.test(part)) {
      parsed.validity = parseValidityPeriod(part);
      console.log('üìÖ –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è:', parsed.validity);
      index++;
      continue;
    }
    
    // COR/AMD/RTD
    if (part === 'COR' || part === 'AMD' || part === 'RTD') {
      console.log('‚ÑπÔ∏è –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä:', part);
      index++;
      continue;
    }
    
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–≥–¥–∞ –Ω–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    if (part === 'FM' || part.startsWith('FM') || part === 'BECMG' || part === 'TEMPO' || part.startsWith('PROB')) {
      console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –Ω–∞–π–¥–µ–Ω:', part);
      break;
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑
    if (isWindCode(part) || isVisibilityCode(part) || isWeatherCode(part) || isCloudCode(part)) {
      console.log('üå§Ô∏è –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑');
      break;
    }
    
    index++;
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –≤—ã–ø—É—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ
  if (!parsed.issuanceTime) {
    const now = new Date();
    const day = now.getUTCDate().toString().padStart(2, '0');
    const hour = now.getUTCHours().toString().padStart(2, '0');
    const minute = now.getUTCMinutes().toString().padStart(2, '0');
    parsed.issuanceTime = day + hour + minute;
    console.log('üïí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø—É—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', parsed.issuanceTime);
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–µ—Ä–∏–æ–¥, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
  if (!parsed.validity.from) {
    parsed.validity = {
      from: parsed.issuanceTime.slice(0, 6),
      to: (parseInt(parsed.issuanceTime.slice(0, 2)) + 1).toString().padStart(2, '0') + parsed.issuanceTime.slice(2, 6)
    };
    console.log('üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', parsed.validity);
  }

  console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–∞:', index);
  console.log('üìä –û—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏:', parts.slice(index));

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
  if (!currentForecast && index < parts.length) {
    currentForecast = {
      type: 'MAIN',
      validity: { ...parsed.validity },
      weather: [],
      clouds: [],
      raw: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑'
    };
    console.log('üÜï –°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ');
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  while (index < parts.length) {
    const part = parts[index];
    if (!part) {
      index++;
      continue;
    }

    console.log(`üîç –ü–∞—Ä—Å–∏–º —á–∞—Å—Ç—å [${index}]:`, part);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
    if (part === 'RMK' || part === 'REMARKS') {
      inRemarks = true;
      index++;
      continue;
    }

    if (inRemarks) {
      remarks.push(part);
      index++;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º FM —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ –æ–¥–Ω–æ–º —Ç–æ–∫–µ–Ω–µ
    const fmTimeResult = parseFmWithTime(part);
    const isFmWithTime = !!fmTimeResult;
    const isChangeType = part === 'FM' || part.startsWith('FM') || part === 'BECMG' || part === 'TEMPO' || part.startsWith('PROB');

    if (isChangeType || isFmWithTime) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–µ
      if (currentForecast && hasForecastData(currentForecast)) {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º:', currentForecast);
        parsed.forecast.push(currentForecast);
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
      let type: TafForecast['type'] = 'MAIN';
      let changeType: 'BECMG' | 'TEMPO' | 'PROB' | 'FM' | undefined;
      let probability: number | undefined;
      let fmTime: string | undefined;

      if (part.startsWith('PROB')) {
        type = 'PROB';
        const probMatch = part.match(/^PROB(\d{2})$/);
        probability = probMatch ? parseInt(probMatch[1]) : 30;
        changeType = 'PROB';
      } else if (part === 'BECMG') {
        type = 'BECMG';
        changeType = 'BECMG';
      } else if (part === 'TEMPO') {
        type = 'TEMPO';
        changeType = 'TEMPO';
      } else if (part === 'FM' || part.startsWith('FM')) {
        type = 'MAIN';
        changeType = 'FM';
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FM —Å –≤—Ä–µ–º–µ–Ω–µ–º
        if (isFmWithTime && fmTimeResult) {
          fmTime = fmTimeResult.time;
          console.log('üïí –ù–∞–π–¥–µ–Ω FM —Å –≤—Ä–µ–º–µ–Ω–µ–º:', fmTime);
        }
      }

      currentForecast = {
        type,
        changeType,
        probability,
        validity: { from: '', to: '' },
        weather: [],
        clouds: [],
        raw: part
      };

      console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑:', currentForecast);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
      if (changeType === 'FM') {
        if (fmTime) {
          currentForecast.validity.from = fmTime;
          const nextFmTime = findNextFmTime(parts, index + 1);
          currentForecast.validity.to = nextFmTime || parsed.validity.to;
          console.log('üïí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ FM –∏–∑ —Ç–æ–∫–µ–Ω–∞:', currentForecast.validity);
        } else if (index + 1 < parts.length) {
          const timePart = parts[index + 1];
          if (/^\d{4}$/.test(timePart)) {
            currentForecast.validity.from = parseTafTime(timePart);
            const nextFmTime = findNextFmTime(parts, index + 2);
            currentForecast.validity.to = nextFmTime || parsed.validity.to;
            index++;
            console.log('üïí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ FM:', currentForecast.validity);
          }
        }
      } else if (index + 1 < parts.length && /\d{4}\/\d{4}/.test(parts[index + 1])) {
        // –ü–µ—Ä–∏–æ–¥ –¥–ª—è BECMG/TEMPO/PROB
        currentForecast.validity = parseValidityPeriod(parts[index + 1]);
        index++;
        console.log('üïí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', currentForecast.validity);
      } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç
        currentForecast.validity = calculateDefaultValidity(parsed.validity, parsed.forecast.length);
        console.log('üïí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:', currentForecast.validity);
      }

      // –ï—Å–ª–∏ –≤ FM —Ç–æ–∫–µ–Ω–µ –µ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–∞—Ä—Å–∏–º –∏—Ö
      if (isFmWithTime && fmTimeResult && fmTimeResult.remaining) {
        console.log('üìù –ü–∞—Ä—Å–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ FM —Ç–æ–∫–µ–Ω–∞:', fmTimeResult.remaining);
        parseMeteoData(currentForecast, fmTimeResult.remaining);
      }

      index++;
      continue;
    }

    // –ü–∞—Ä—Å–∏–º –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    if (currentForecast) {
      parseMeteoData(currentForecast, part);
    } else {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö:', part);
    }
    
    index++;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
  if (currentForecast) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑:', currentForecast);
    parsed.forecast.push(currentForecast);
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞
  if (parsed.forecast.length === 0 && currentForecast) {
    console.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π');
    parsed.forecast.push(currentForecast);
  }

  parsed.remarks = remarks;

  console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ TAF:', {
    icaoCode: parsed.icaoCode,
    issuanceTime: parsed.issuanceTime,
    validity: parsed.validity,
    forecastCount: parsed.forecast.length,
    forecasts: parsed.forecast.map(f => ({
      type: f.type,
      changeType: f.changeType,
      validity: f.validity,
      hasWind: !!f.wind,
      hasVisibility: !!f.visibility,
      weatherCount: f.weather.length,
      cloudsCount: f.clouds.length,
      raw: f.raw
    }))
  });
  
  return parsed;
};

const parseComplexMeteoData = (forecast: TafForecast, part: string): boolean => {
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞ "15003688WP5"
  const complexMatch = part.match(/^(\d{3})(\d{2,3})(\d{2,3})([A-Z].*)$/);
  if (complexMatch) {
    const [, direction, speed, gust, rest] = complexMatch;
    
    // –ü–∞—Ä—Å–∏–º –≤–µ—Ç–µ—Ä
    const windDirection = parseInt(direction);
    if (windDirection <= 360) {
      forecast.wind = {
        direction: windDirection,
        speed: parseInt(speed),
        gust: parseInt(gust),
        unit: 'KT'
      };
      console.log('üí® –ü–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–∂–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞:', forecast.wind);
    }
    
    // –ü–∞—Ä—Å–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (rest) {
      parseMeteoData(forecast, rest);
    }
    
    return true;
  }
  
  return false;
};

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
const parseMeteoData = (forecast: TafForecast, part: string): void => {
  let parsedElement = false;

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  if (parseComplexMeteoData(forecast, part)) {
    parsedElement = true;
  }

  // –ó–∞—Ç–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
  else if (isWindCode(part)) {
    forecast.wind = parseWind(part);
    console.log('üí® –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ç—Ä–∞:', forecast.wind);
    parsedElement = true;
  }

  else if (/^\d{3}V\d{3}$/.test(part)) {
    if (forecast.wind) {
      const variableMatch = part.match(/^(\d{3})V(\d{3})$/);
      if (variableMatch) {
        forecast.wind.variableFrom = parseInt(variableMatch[1]);
        forecast.wind.variableTo = parseInt(variableMatch[2]);
      }
    }
    parsedElement = true;
  }

  else if (isVisibilityCode(part)) {
    forecast.visibility = parseVisibility(part);
    console.log('üëÅÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –≤–∏–¥–∏–º–æ—Å—Ç–∏:', forecast.visibility);
    parsedElement = true;
  }

  else if (isWeatherCode(part)) {
    if (part === 'NSW') {
      forecast.weather = [];
    } else {
      const weather = decodeWeather(part);
      forecast.weather.push(weather);
      console.log('üå¶Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–≥–æ–¥—ã:', weather);
    }
    parsedElement = true;
  }

  else if (isCloudCode(part)) {
    if (part === 'NSC' || part === 'SKC' || part === 'CLR' || part === 'NCD') {
      forecast.clouds = [];
    } else {
      const cloud = decodeCloudCoverage(part);
      forecast.clouds.push(cloud);
      console.log('‚òÅÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏:', cloud);
    }
    parsedElement = true;
  }

  // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ raw
  if (!parsedElement) {
    if (forecast.raw && !forecast.raw.includes(part)) {
      forecast.raw += ' ' + part;
    }
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ raw:', part);
  }
};

/**
 * –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è FM –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è
 */
const findNextFmTime = (parts: string[], startIndex: number): string | null => {
  for (let i = startIndex; i < parts.length; i++) {
    const part = parts[i];
    
    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π FM
    if (part === 'FM' && i + 1 < parts.length) {
      const timePart = parts[i + 1];
      if (/^\d{4}$/.test(timePart)) {
        const fmTime = parseTafTime(timePart);
        console.log('üîç –ù–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π FM –≤—Ä–µ–º—è:', fmTime);
        return fmTime;
      }
    }
    
    // –ò–ª–∏ –∫–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ BECMG/TEMPO —Å –ø–µ—Ä–∏–æ–¥–æ–º
    else if ((part === 'BECMG' || part === 'TEMPO' || part.startsWith('PROB')) && i + 1 < parts.length) {
      const nextPart = parts[i + 1];
      if (/\d{4}\/\d{4}/.test(nextPart)) {
        const period = parseValidityPeriod(nextPart);
        console.log('üîç –ù–∞–π–¥–µ–Ω –ø–µ—Ä–∏–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ:', period.from);
        return period.from; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∫–∞–∫ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ
      }
    }
    
    // –ò–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    else if (i === parts.length - 1) {
      console.log('üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞');
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 1 —á–∞—Å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ FM
      const currentTime = parts[startIndex - 2]; // –í—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ FM
      if (currentTime && /^\d{4}$/.test(currentTime)) {
        const hours = parseInt(currentTime.slice(0, 2));
        const minutes = parseInt(currentTime.slice(2, 4));
        const nextHours = (hours + 1) % 24;
        return nextHours.toString().padStart(2, '0') + minutes.toString().padStart(2, '0') + '00';
      }
    }
  }
  
  console.log('üîç –°–ª–µ–¥—É—é—â–µ–µ FM –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  return null;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 */
const hasForecastData = (forecast: TafForecast): boolean => {
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è FM –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ
  if (forecast.changeType === 'FM') {
    return true;
  }
  
  return !!(forecast.wind || 
           forecast.visibility || 
           (forecast.weather && forecast.weather.length > 0) || 
           (forecast.clouds && forecast.clouds.length > 0) ||
           forecast.turbulence ||
           forecast.icing ||
           (forecast.temperature && forecast.temperature.length > 0) ||
           forecast.raw.trim().length > 0);
};

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤–µ—Ç—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
 */
const parseWind = (code: string): TafWind | undefined => {
  if (code === '00000KT' || code === '00000MPS') {
    return {
      direction: 0,
      speed: 0,
      unit: code.includes('MPS') ? 'MPS' : 'KT',
      isCalm: true
    };
  }
  
  if (code.startsWith('VRB')) {
    const vrbMatch = code.match(/^VRB(\d{1,2})(G(\d{1,3}))?(KT|MPS|KMH)$/);
    if (vrbMatch) {
      const result: TafWind = {
        direction: 'VRB',
        speed: parseInt(vrbMatch[1]),
        unit: vrbMatch[4]
      };
      if (vrbMatch[3]) {
        result.gust = parseInt(vrbMatch[3]);
      }
      return result;
    }
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 25888KT (–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞)
  const windMatch = code.match(/^(\d{3})(\d{2,3})(G(\d{1,3}))?(KT|MPS|KMH)$/);
  if (windMatch) {
    const direction = parseInt(windMatch[1]);
    const speed = parseInt(windMatch[2]);
    const unit = windMatch[5];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (direction > 360) {
      console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞:', direction);
      return undefined;
    }
    
    const result: TafWind = {
      direction: direction,
      speed: speed,
      unit: unit
    };
    
    if (windMatch[4]) {
      result.gust = parseInt(windMatch[4]);
    }
    
    return result;
  }
  
  return undefined;
};

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç–∞—Ç—É—Ç–Ω—ã—Ö –º–∏–ª—å
 */
const parseVisibility = (code: string): TafVisibility | undefined => {
  if (code === 'CAVOK') {
    return {
      value: 10000,
      unit: 'm',
      isCavok: true
    };
  }
  
  if (code === '9999') {
    return {
      value: 10000,
      unit: 'm',
      isCavok: false
    };
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ P6SM (–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞)
  if (code.endsWith('SM')) {
    const milesText = code.replace('SM', '').trim();
    let miles = 0;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ P6SM (–±–æ–ª–µ–µ 6 –º–∏–ª—å)
    if (milesText.startsWith('P')) {
      const milesValue = parseFloat(milesText.slice(1));
      return {
        value: milesValue,
        unit: 'SM',
        isCavok: false,
        isGreaterThan: true,
        metersValue: Math.round(milesValue * 1609.34)
      };
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (1/2SM)
    if (milesText.includes('/')) {
      const [numerator, denominator] = milesText.split('/').map(Number);
      miles = numerator / denominator;
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (1 1/2SM)
    else if (milesText.includes(' ')) {
      const parts = milesText.split(' ');
      if (parts[1].includes('/')) {
        const [numerator, denominator] = parts[1].split('/').map(Number);
        miles = parseInt(parts[0]) + (numerator / denominator);
      }
    }
    // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
    else {
      miles = parseFloat(milesText);
    }
    
    return {
      value: miles,
      unit: 'SM',
      isCavok: false,
      metersValue: Math.round(miles * 1609.34)
    };
  }
  
  if (code.startsWith('P')) {
    return {
      value: parseInt(code.slice(1)),
      unit: 'm',
      isCavok: false,
      isGreaterThan: true
    };
  }
  
  if (code.startsWith('M')) {
    return {
      value: parseInt(code.slice(1)),
      unit: 'm',
      isCavok: false,
      isLessThan: true
    };
  }
  
  if (/^\d{4}$/.test(code)) {
    return {
      value: parseInt(code),
      unit: 'm',
      isCavok: false
    };
  }
  
  return undefined;
};

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π TAF
 */
const decodeWeather = (code: string): TafWeather => {
  let weatherCode = code;
  const weather: TafWeather = {
    phenomena: [],
    raw: code
  };

  // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
  if (weatherCode.startsWith('+')) {
    weather.intensity = 'heavy';
    weatherCode = weatherCode.slice(1);
  } else if (weatherCode.startsWith('-')) {
    weather.intensity = 'light';
    weatherCode = weatherCode.slice(1);
  } else if (weatherCode.startsWith('VC')) {
    weather.intensity = 'vicinity';
    weatherCode = weatherCode.slice(2);
  }

  // –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
  const descriptors = ['MI', 'BC', 'PR', 'DR', 'BL', 'SH', 'TS', 'FZ'];
  for (const descriptor of descriptors) {
    if (weatherCode.startsWith(descriptor)) {
      weather.descriptor = descriptor;
      weatherCode = weatherCode.slice(descriptor.length);
      break;
    }
  }

  // –Ø–≤–ª–µ–Ω–∏—è
  const phenomenaCodes = [
    'DZ', 'RA', 'SN', 'SG', 'IC', 'PL', 'GR', 'GS', 'UP',
    'BR', 'FG', 'FU', 'VA', 'DU', 'SA', 'HZ', 'PY',
    'PO', 'SQ', 'FC', 'SS', 'DS'
  ];

  let remainingCode = weatherCode;
  while (remainingCode.length > 0) {
    let found = false;
    for (const phenom of phenomenaCodes) {
      if (remainingCode.startsWith(phenom)) {
        weather.phenomena.push(phenom);
        remainingCode = remainingCode.slice(phenom.length);
        found = true;
        break;
      }
    }
    if (!found) break;
  }

  return weather;
};

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
 */
const decodeCloudCoverage = (code: string): TafCloud => {
  const coverageMap: Record<string, string> = {
    'FEW': 'few',
    'SCT': 'scattered', 
    'BKN': 'broken',
    'OVC': 'overcast',
    'VV': 'vertical_visibility',
    'SKC': 'sky_clear',
    'CLR': 'clear',
    'NSC': 'no_significant_clouds',
    'NCD': 'no_clouds_detected'
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 5CT822 (–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞)
  if (/^\d{1,2}[A-Z]{2}\d+$/.test(code)) {
    const altitude = parseInt(code.slice(5)) * 100; // 22 * 100 = 2200 ft
    
    const cloud: TafCloud = {
      coverage: 'unknown',
      altitude: altitude,
      type: undefined,
      isCeiling: false
    };
    
    return cloud;
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
  const coverage = code.slice(0, 3);
  const cloud: TafCloud = {
    coverage: coverageMap[coverage] || coverage,
    altitude: parseInt(code.slice(3, 6)) * 100,
    type: undefined,
    isCeiling: false
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–ª–∞–∫–æ–≤ (CB, TCU)
  if (code.includes('CB')) {
    cloud.type = 'CB';
    cloud.isCeiling = true;
  } else if (code.includes('TCU')) {
    cloud.type = 'TCU';
    cloud.isCeiling = true;
  } else {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ—Ç–æ–ª–∫–æ–º
    cloud.isCeiling = cloud.coverage === 'broken' || cloud.coverage === 'overcast';
  }

  return cloud;
};

const calculateDefaultValidity = (mainValidity: { from: string; to: string }, forecastIndex: number): { from: string; to: string } => {
  // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥
  if (forecastIndex === 0) {
    return { ...mainValidity };
  }
  
  // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ 2-6 —á–∞—Å–æ–≤
  const fromTime = mainValidity.from;
  const fromDay = parseInt(fromTime.slice(0, 2));
  let fromHour = parseInt(fromTime.slice(2, 4)) + (forecastIndex * 2); // +2 —á–∞—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏
  if (fromHour >= 24) {
    fromHour -= 24;
  }
  
  const toHour = (fromHour + 4) % 24; // –ü–µ—Ä–∏–æ–¥ 4 —á–∞—Å–∞
  
  return {
    from: fromDay.toString().padStart(2, '0') + fromHour.toString().padStart(2, '0') + '00',
    to: fromDay.toString().padStart(2, '0') + toHour.toString().padStart(2, '0') + '00'
  };
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ç—Ä–∞
 */
export const getWindDescription = (wind: TafWind): string => {
  if (wind.direction === 'VRB') {
    return `–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–π ${wind.speed} ${wind.unit.toLowerCase()}`;
  }
  
  let directionText = '';
  const dir = wind.direction as number;
  
  if (dir >= 337.5 || dir < 22.5) directionText = '–°–µ–≤–µ—Ä–Ω—ã–π';
  else if (dir < 67.5) directionText = '–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π';
  else if (dir < 112.5) directionText = '–í–æ—Å—Ç–æ—á–Ω—ã–π';
  else if (dir < 157.5) directionText = '–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π';
  else if (dir < 202.5) directionText = '–Æ–∂–Ω—ã–π';
  else if (dir < 247.5) directionText = '–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π';
  else if (dir < 292.5) directionText = '–ó–∞–ø–∞–¥–Ω—ã–π';
  else directionText = '–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π';

  let text = `${directionText} (${dir}¬∞) ${wind.speed} ${wind.unit.toLowerCase()}`;
  
  if (wind.gust) {
    text += `, –ø–æ—Ä—ã–≤—ã –¥–æ ${wind.gust}`;
  }
  
  if (wind.variableFrom && wind.variableTo) {
    text += `, –º–µ–Ω—è–µ—Ç—Å—è –æ—Ç ${wind.variableFrom}¬∞ –¥–æ ${wind.variableTo}¬∞`;
  }
  
  return text;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 */
export const getVisibilityDescription = (vis: TafVisibility): string => {
  if (vis.isCavok) {
    return '–í–∏–¥–∏–º–æ—Å—Ç—å ‚â•10 –∫–º, –Ω–µ—Ç –æ–±–ª–∞–∫–æ–≤ –Ω–∏–∂–µ 5000 ft, –Ω–µ—Ç –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π';
  }
  
  if (vis.value >= 10000 && vis.unit === 'm') {
    return '–í–∏–¥–∏–º–æ—Å—Ç—å ‚â•10 –∫–º';
  }
  
  if (vis.isGreaterThan) {
    return `–í–∏–¥–∏–º–æ—Å—Ç—å –±–æ–ª–µ–µ ${vis.value} –º–µ—Ç—Ä–æ–≤`;
  }
  
  if (vis.isLessThan) {
    return `–í–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω–µ–µ ${vis.value} –º–µ—Ç—Ä–æ–≤`;
  }
  
  // –î–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Ç–Ω—ã—Ö –º–∏–ª—è—Ö
  if (vis.unit === 'SM') {
    let milesText = '';
    if (vis.value < 1) {
      // –î—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (1/2SM -> 0.5 –º–∏–ª–∏)
      milesText = `${vis.value} –º–∏–ª–∏`;
    } else if (vis.value === 1) {
      milesText = '1 –º–∏–ª—è';
    } else if (vis.value < 5) {
      milesText = `${vis.value} –º–∏–ª–∏`;
    } else {
      milesText = `${vis.value} –º–∏–ª—å`;
    }
    
    if (vis.metersValue) {
      return `–í–∏–¥–∏–º–æ—Å—Ç—å ${milesText} (‚âà${Math.round(vis.metersValue)} –º)`;
    }
    return `–í–∏–¥–∏–º–æ—Å—Ç—å ${milesText}`;
  }
  
  return `–í–∏–¥–∏–º–æ—Å—Ç—å ${vis.value} –º–µ—Ç—Ä–æ–≤`;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
 */
export const getWeatherDescription = (weather: TafWeather): string => {
  const intensityMap: Record<string, string> = {
    'light': '–°–ª–∞–±—ã–π ',
    'heavy': '–°–∏–ª—å–Ω—ã–π ',
    'vicinity': '–í–±–ª–∏–∑–∏ '
  };

  const descriptorMap: Record<string, string> = {
    'MI': '–º–µ–ª–∫–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π ',
    'BC': '–ø–æ–∑–µ–º–Ω—ã–π ',
    'PR': '—á–∞—Å—Ç–∏—á–Ω—ã–π ',
    'DR': '–Ω–∏–∑–æ–≤–æ–π ',
    'BL': '–º–µ—Ç–µ–ª—å ',
    'SH': '–ª–∏–≤–µ–Ω—å ',
    'TS': '–≥—Ä–æ–∑–∞ ',
    'FZ': '–ø–µ—Ä–µ–æ—Ö–ª–∞–∂–¥–µ–Ω–Ω—ã–π '
  };

  const phenomenaMap: Record<string, string> = {
    'DZ': '–º–æ—Ä–æ—Å—å',
    'RA': '–¥–æ–∂–¥—å',
    'SN': '—Å–Ω–µ–≥',
    'SG': '—Å–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞',
    'IC': '–ª–µ–¥—è–Ω—ã–µ –∏–≥–ª—ã',
    'PL': '–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
    'GR': '–≥—Ä–∞–¥',
    'GS': '–º–µ–ª–∫–∏–π –≥—Ä–∞–¥',
    'UP': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—Å–∞–¥–∫–∏',
    'BR': '–¥—ã–º–∫–∞',
    'FG': '—Ç—É–º–∞–Ω',
    'FU': '–¥—ã–º',
    'VA': '–≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ª',
    'DU': '–ø—ã–ª—å',
    'SA': '–ø–µ—Å–æ–∫',
    'HZ': '–º–≥–ª–∞',
    'PY': '–±—Ä—ã–∑–≥–∏',
    'PO': '–ø—ã–ª—å–Ω—ã–µ –≤–∏—Ö—Ä–∏',
    'SQ': '—à–∫–≤–∞–ª',
    'FC': '–≤–æ—Ä–æ–Ω–∫–∞',
    'SS': '–ø–µ—Å—á–∞–Ω–∞—è –±—É—Ä—è',
    'DS': '–ø—ã–ª—å–Ω–∞—è –±—É—Ä—è'
  };

  let description = intensityMap[weather.intensity || ''] || '';
  description += descriptorMap[weather.descriptor || ''] || '';
  description += weather.phenomena.map(p => phenomenaMap[p] || p).join(' –∏ ');

  return description.trim();
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
 */
export const getCloudDescription = (cloud: TafCloud): string => {
  const coverageMap: Record<string, string> = {
    'few': '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è',
    'scattered': '–†–∞—Å—Å–µ—è–Ω–Ω–∞—è',
    'broken': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è',
    'overcast': '–°–ø–ª–æ—à–Ω–∞—è',
    'vertical_visibility': '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å'
  };

  let description = `${coverageMap[cloud.coverage] || cloud.coverage} –Ω–∞ ${cloud.altitude} ft`;
  
  if (cloud.isCeiling) {
    description += ' (–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)';
  }
  
  return description;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–ª–∞–∫–æ–≤ —Å —É—á–µ—Ç–æ–º CB
 */
export const getCloudDescriptionWithHazards = (cloud: TafCloud): string => {
  const coverageMap: Record<string, string> = {
    'few': '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è',
    'scattered': '–†–∞—Å—Å–µ—è–Ω–Ω–∞—è',
    'broken': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è',
    'overcast': '–°–ø–ª–æ—à–Ω–∞—è',
    'vertical_visibility': '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å'
  };

  let description = `${coverageMap[cloud.coverage] || cloud.coverage} –Ω–∞ ${cloud.altitude} ft`;
  
  if (cloud.type === 'CB') {
    description += ' (Cumulonimbus - –∫—É—á–µ–≤–æ-–¥–æ–∂–¥–µ–≤—ã–µ)';
  } else if (cloud.type === 'TCU') {
    description += ' (Towering Cumulus - –º–æ—â–Ω–æ-–∫—É—á–µ–≤—ã–µ)';
  }
  
  if (cloud.isCeiling) {
    description += ' - –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞';
  }
  
  return description;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è CB –æ–±–ª–∞–∫–æ–≤
 */
export const getCbHazardsDescription = (clouds: TafCloud[]): string[] => {
  const hazards: string[] = [];
  const hasCb = clouds.some(cloud => cloud.type === 'CB' || cloud.type === 'TCU');
  
  if (hasCb) {
    hazards.push('‚ö° –ì—Ä–æ–∑–æ–≤–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    hazards.push('üí® –°–∏–ª—å–Ω–∞—è —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å');
    hazards.push('üßä –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏–µ');
    hazards.push('üåÄ –°–¥–≤–∏–≥ –≤–µ—Ç—Ä–∞');
    hazards.push('üßä –ì—Ä–∞–¥');
  }
  
  return hazards;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
 */
export const getTurbulenceDescription = (turbulence: TurbulenceInfo): string => {
  const intensityMap: Record<string, string> = {
    'none': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    'light': '–°–ª–∞–±–∞—è',
    'light_moderate': '–£–º–µ—Ä–µ–Ω–Ω–æ-—Å–ª–∞–±–∞—è', 
    'moderate': '–£–º–µ—Ä–µ–Ω–Ω–∞—è',
    'moderate_severe': '–£–º–µ—Ä–µ–Ω–Ω–æ-—Å–∏–ª—å–Ω–∞—è',
    'severe': '–°–∏–ª—å–Ω–∞—è',
    'extreme': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è'
  };

  const intensity = intensityMap[turbulence.intensity] || turbulence.intensity;
  return `${intensity} —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ ${turbulence.minAltitude}-${turbulence.maxAltitude} ft`;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è
 */
export const getIcingDescription = (icing: IcingInfo): string => {
  const intensityMap: Record<string, string> = {
    'none': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    'light': '–°–ª–∞–±–æ–µ',
    'light_moderate': '–£–º–µ—Ä–µ–Ω–Ω–æ-—Å–ª–∞–±–æ–µ',
    'moderate': '–£–º–µ—Ä–µ–Ω–Ω–æ–µ', 
    'severe': '–°–∏–ª—å–Ω–æ–µ'
  };

  const intensity = intensityMap[icing.intensity] || icing.intensity;
  return `${intensity} –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏–µ –Ω–∞ ${icing.minAltitude}-${icing.maxAltitude} ft`;
};

/**
 * –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ TAF –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatTafTimeForDisplay = (timeString: string): string => {
  if (!timeString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  
  try {
    const cleanTime = timeString.replace('Z', '');
    
    if (cleanTime.length === 6) {
      const day = cleanTime.slice(0, 2);
      const hour = cleanTime.slice(2, 4);
      const minute = cleanTime.slice(4, 6);
      
      const now = new Date();
      const currentYear = now.getFullYear();
      const currentMonth = now.getMonth();
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É
      let date = new Date(currentYear, currentMonth, parseInt(day), parseInt(hour), parseInt(minute));
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Å—è—Ü–∞ –µ—Å–ª–∏ –¥–µ–Ω—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
      if (parseInt(day) < now.getDate()) {
        date = new Date(currentYear, currentMonth + 1, parseInt(day), parseInt(hour), parseInt(minute));
      }
      
      const monthNames = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
      const month = monthNames[date.getMonth()];
      const year = date.getFullYear();
      
      return `${parseInt(day)} ${month} ${year}, ${hour}:${minute}Z`;
    }
    
    // –î–ª—è 4-–∑–Ω–∞—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    if (cleanTime.length === 4) {
      const hour = cleanTime.slice(0, 2);
      const minute = cleanTime.slice(2, 4);
      const now = new Date();
      const day = now.getUTCDate().toString().padStart(2, '0');
      const monthNames = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
      const month = monthNames[now.getMonth()];
      const year = now.getFullYear();
      
      return `${parseInt(day)} ${month} ${year}, ${hour}:${minute}Z`;
    }
    
    return timeString;
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ TAF:', timeString, error);
    return timeString;
  }
};



/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ TAF —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
export const parseTafSafely = (tafString: string): ParsedTaf | null => {
  try {
    const parsed = parseTafUniversal(tafString);
    return parsed;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ TAF:', error);
    return null;
  }
};