// src/components/meteorology/utils/sigmetParser.ts

export interface SigmetData {
  id: string;
  type: 'SIGMET' | 'AIRMET' | 'GAMET';
  issuanceTime: string;
  validity: {
    from: string;
    to: string;
  };
  fir: string;
  phenomenon: string;
  intensity?: string;
  location: {
    area: string;
    coordinates?: string;
    altitude?: {
      min: number;
      max: number;
    };
  };
  movement?: {
    direction: number;
    speed: number;
  };
  description: string;
  raw: string;
}

export interface ParsedSigmet {
  sigmets: SigmetData[];
  raw: string;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
const fetchWithTimeout = async (url: string, timeout: number = 8000): Promise<Response> => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);

  try {
    const response = await fetch(url, {
      signal: controller.signal,
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'AeroTrainer/1.0'
      },
    });
    
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};

/**
 * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É SIGMET –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
 */
export const parseSigmet = (sigmetString: string): SigmetData[] => {
  console.log('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ SIGMET:', sigmetString);

  if (!sigmetString || sigmetString.trim().length === 0) {
    console.log('‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ SIGMET');
    return [];
  }

  const cleanSigmet = sigmetString.replace(/\n/g, ' ').replace(/\s+/g, ' ').trim();
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω SIGMET, –ø–∞—Ä—Å–∏–º –µ–≥–æ
  if (cleanSigmet.includes('SIGMET') || cleanSigmet.includes('AIRMET')) {
    const parsed = parseSingleSigmet(cleanSigmet);
    return parsed ? [parsed] : [];
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ SIGMET, —Ä–∞–∑–¥–µ–ª—è–µ–º –∏—Ö
  const sigmetParts = cleanSigmet.split(/(?=SIGMET|AIRMET)/);
  const parsedSigmets: SigmetData[] = [];

  for (const part of sigmetParts) {
    if (part.trim().length > 10) {
      const parsed = parseSingleSigmet(part.trim());
      if (parsed) {
        parsedSigmets.push(parsed);
      }
    }
  }

  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ SIGMET:', parsedSigmets);
  return parsedSigmets;
};

/**
 * –ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π SIGMET
 */
const parseSingleSigmet = (sigmetString: string): SigmetData | null => {
  try {
    const sigmet: SigmetData = {
      id: '',
      type: 'SIGMET',
      issuanceTime: '',
      validity: { from: '', to: '' },
      fir: '',
      phenomenon: '',
      location: { area: '' },
      description: '',
      raw: sigmetString
    };

    const parts = sigmetString.split(' ').filter(p => p.length > 0);
    let index = 0;

    // 1. –¢–∏–ø –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    if (index < parts.length) {
      if (parts[index].includes('SIGMET')) {
        sigmet.type = 'SIGMET';
      } else if (parts[index].includes('AIRMET')) {
        sigmet.type = 'AIRMET';
      } else if (parts[index].includes('GAMET')) {
        sigmet.type = 'GAMET';
      }
      index++;
    }

    // 2. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    if (index < parts.length && /^[A-Z]\d+$/.test(parts[index])) {
      sigmet.id = parts[index];
      index++;
    }

    // 3. –í—Ä–µ–º—è –≤—ã–ø—É—Å–∫–∞
    if (index < parts.length && /\d{6}$/.test(parts[index])) {
      sigmet.issuanceTime = parts[index];
      index++;
    }

    // 4. FIR —Ä–µ–≥–∏–æ–Ω
    if (index < parts.length && /^[A-Z]{4}$/.test(parts[index])) {
      sigmet.fir = parts[index];
      index++;
    }

    // 5. –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è
    if (index < parts.length && parts[index].includes('/')) {
      const validityMatch = parts[index].match(/(\d{4})\/(\d{4})/);
      if (validityMatch) {
        sigmet.validity.from = validityMatch[1];
        sigmet.validity.to = validityMatch[2];
      }
      index++;
    }

    // 6. –Ø–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    while (index < parts.length) {
      const part = parts[index];
      
      // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
      if (part === 'INTSF' || part === 'WKN') {
        sigmet.intensity = part === 'INTSF' ? '—É—Å–∏–ª–∏–≤–∞—é—â–∏–π—Å—è' : '–æ—Å–ª–∞–±–µ–≤–∞—é—â–∏–π';
        index++;
        continue;
      }

      // –û–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è
      const phenomena = [
        'TS', 'GR', 'TURB', 'ICE', 'MTW', 'FZLVL', 'VOLCANO', 
        'RADATION', 'TC', 'HAIL', 'DS', 'SS'
      ];

      for (const phenom of phenomena) {
        if (part.includes(phenom)) {
          sigmet.phenomenon = getPhenomenonDescription(phenom);
          index++;
          break;
        }
      }

      // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      if (part.includes('N') && part.includes('E') || part.includes('W')) {
        sigmet.location.coordinates = part;
        index++;
        continue;
      }

      // –í—ã—Å–æ—Ç–∞
      if (part.includes('FL') || (/\d+FT/.test(part))) {
        const altitude = parseAltitude(part);
        if (altitude) {
          sigmet.location.altitude = altitude;
        }
        index++;
        continue;
      }

      // –î–≤–∏–∂–µ–Ω–∏–µ
      if (part.match(/^\d{5}KT$/)) {
        const movement = parseMovement(part);
        if (movement) {
          sigmet.movement = movement;
        }
        index++;
        continue;
      }

      // –û–±–ª–∞—Å—Ç—å
      if (part.length > 2 && !sigmet.location.area && 
          !part.match(/^\d/) && !part.includes('/') && !part.includes('KT')) {
        sigmet.location.area = part;
      }

      index++;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    sigmet.description = generateSigmetDescription(sigmet);

    return sigmet;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SIGMET:', error);
    return null;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —è–≤–ª–µ–Ω–∏—è
 */
const getPhenomenonDescription = (code: string): string => {
  const phenomena: Record<string, string> = {
    'TS': '–ì—Ä–æ–∑—ã',
    'GR': '–ì—Ä–∞–¥',
    'TURB': '–¢—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å',
    'ICE': '–û–±–ª–µ–¥–µ–Ω–µ–Ω–∏–µ',
    'MTW': '–ì–æ—Ä–Ω—ã–µ –≤–æ–ª–Ω—ã',
    'FZLVL': '–£—Ä–æ–≤–µ–Ω—å –∑–∞–º–µ—Ä–∑–∞–Ω–∏—è',
    'VOLCANO': '–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ª',
    'RADATION': '–†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    'TC': '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª–æ–Ω',
    'HAIL': '–ö—Ä—É–ø–Ω—ã–π –≥—Ä–∞–¥',
    'DS': '–ü—ã–ª—å–Ω–∞—è –±—É—Ä—è',
    'SS': '–ü–µ—Å—á–∞–Ω–∞—è –±—É—Ä—è'
  };

  return phenomena[code] || code;
};

/**
 * –ü–∞—Ä—Å–∏—Ç –≤—ã—Å–æ—Ç—É
 */
const parseAltitude = (altitudeStr: string): { min: number; max: number } | null => {
  // FL250-FL350
  const flMatch = altitudeStr.match(/FL(\d+)-FL(\d+)/);
  if (flMatch) {
    return {
      min: parseInt(flMatch[1]) * 100,
      max: parseInt(flMatch[2]) * 100
    };
  }

  // 10000FT-15000FT
  const ftMatch = altitudeStr.match(/(\d+)FT-(\d+)FT/);
  if (ftMatch) {
    return {
      min: parseInt(ftMatch[1]),
      max: parseInt(ftMatch[2])
    };
  }

  // FL250
  const singleFlMatch = altitudeStr.match(/FL(\d+)/);
  if (singleFlMatch) {
    const alt = parseInt(singleFlMatch[1]) * 100;
    return { min: alt, max: alt + 1000 };
  }

  // 10000FT
  const singleFtMatch = altitudeStr.match(/(\d+)FT/);
  if (singleFtMatch) {
    const alt = parseInt(singleFtMatch[1]);
    return { min: alt, max: alt + 2000 };
  }

  return null;
};

/**
 * –ü–∞—Ä—Å–∏—Ç –¥–≤–∏–∂–µ–Ω–∏–µ
 */
const parseMovement = (movementStr: string): { direction: number; speed: number } | null => {
  const match = movementStr.match(/^(\d{3})(\d{2})KT$/);
  if (match) {
    return {
      direction: parseInt(match[1]),
      speed: parseInt(match[2])
    };
  }
  return null;
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ SIGMET
 */
const generateSigmetDescription = (sigmet: SigmetData): string => {
  const parts: string[] = [];

  parts.push(`${sigmet.type} ${sigmet.id}`);

  if (sigmet.phenomenon) {
    parts.push(sigmet.phenomenon);
  }

  if (sigmet.intensity) {
    parts.push(`(${sigmet.intensity})`);
  }

  if (sigmet.location.area) {
    parts.push(`–≤ —Ä–∞–π–æ–Ω–µ ${sigmet.location.area}`);
  }

  if (sigmet.location.altitude) {
    const alt = sigmet.location.altitude;
    parts.push(`–Ω–∞ –≤—ã—Å–æ—Ç–∞—Ö ${alt.min}-${alt.max} ft`);
  }

  if (sigmet.movement) {
    parts.push(`–¥–≤–∏–∂–µ—Ç—Å—è ${sigmet.movement.direction}¬∞ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é ${sigmet.movement.speed} —É–∑–ª–æ–≤`);
  }

  if (sigmet.validity.from && sigmet.validity.to) {
    parts.push(`–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å ${sigmet.validity.from}Z –ø–æ ${sigmet.validity.to}Z`);
  }

  return parts.join(' ');
};

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ SIGMET
 */
export const fetchSigmetData = async (icaoCode: string): Promise<string> => {
  try {
    console.log(`üîÑ –ó–∞–ø—Ä–æ—Å SIGMET –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ${icaoCode}`);

    // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ SIGMET –¥–∞–Ω–Ω—ã—Ö
    const sources = [
      // 1. AviationWeather.gov SIGMET
      async () => {
        try {
          const response = await fetchWithTimeout(
            `https://aviationweather.gov/api/data/sigmet?format=json&ids=${icaoCode}`,
            8000
          );
          
          if (!response.ok) throw new Error(`AviationWeather.gov SIGMET error: ${response.status}`);
          
          const data = await response.json();
          return JSON.stringify(data);
        } catch (error) {
          console.warn('AviationWeather.gov SIGMET –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
          throw error;
        }
      },

      // 2. Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      async () => {
        return generateMockSigmet(icaoCode);
      }
    ];

    // –ü—Ä–æ–±—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const source of sources) {
      try {
        const result = await source();
        if (result && result.length > 10) {
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã SIGMET –¥–∞–Ω–Ω—ã–µ`);
          return result;
        }
      } catch (error) {
        console.warn(`‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ SIGMET –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error);
        continue;
      }
    }

    // Fallback
    console.warn(`‚ö†Ô∏è –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ SIGMET –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—é –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ`);
    return generateMockSigmet(icaoCode);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SIGMET:', error);
    return generateMockSigmet(icaoCode);
  }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ SIGMET
 */
const generateMockSigmet = (icaoCode: string): string => {
  const now = new Date();
  const hour = now.getUTCHours().toString().padStart(2, '0');
  const nextHour = (parseInt(hour) + 2) % 24;
  
  const scenarios = [
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ì—Ä–æ–∑—ã
    `SIGMET A123 ${icaoCode} ${hour}00/${nextHour}00 ${icaoCode} TS INTSF AREA N5000 E03700 - N5030 E04000 FL250-FL350 MOV NE 25015KT`,

    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –¢—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å
    `SIGMET B456 ${icaoCode} ${hour}00/${nextHour}00 ${icaoCode} TURB AREA N5200 E03000 - N5230 E03300 FL300-FL400 MOV E 30020KT`,

    // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –û–±–ª–µ–¥–µ–Ω–µ–Ω–∏–µ
    `SIGMET C789 ${icaoCode} ${hour}00/${nextHour}00 ${icaoCode} ICE AREA N5500 E02500 - N5530 E02800 FL200-FL300`,

    // –°—Ü–µ–Ω–∞—Ä–∏–π 4: AIRMET
    `AIRMET D012 ${icaoCode} ${hour}00/${nextHour}00 ${icaoCode} MTW AREA N4800 E03500 - N4830 E03800 FL150-FL250`
  ];

  const sigmet = scenarios[Math.floor(Math.random() * scenarios.length)];
  console.log(`üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock SIGMET: ${sigmet}`);
  return sigmet;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ SIGMET
 */
export const getSigmetTypeDescription = (type: string): string => {
  const types: Record<string, string> = {
    'SIGMET': '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Ç–µ–æ—è–≤–ª–µ–Ω–∏–µ',
    'AIRMET': '–ú–µ—Ç–µ–æ—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ª–µ–≥–∫–æ–π –∞–≤–∏–∞—Ü–∏–∏', 
    'GAMET': '–ú–µ—Ç–µ–æ—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–µ—Ä–æ–≤'
  };
  return types[type] || type;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è SIGMET –ø–æ —Ç–∏–ø—É —è–≤–ª–µ–Ω–∏—è
 */
export const getSigmetColor = (phenomenon: string): string => {
  const colors: Record<string, string> = {
    'TS': '#ff6b6b', // –ö—Ä–∞—Å–Ω—ã–π - –≥—Ä–æ–∑—ã
    'GR': '#ffd700', // –ñ–µ–ª—Ç—ã–π - –≥—Ä–∞–¥
    'TURB': '#64ffda', // –ë–∏—Ä—é–∑–æ–≤—ã–π - —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å
    'ICE': '#1a6fc4', // –°–∏–Ω–∏–π - –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏–µ
    'MTW': '#9d4edd', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - –≥–æ—Ä–Ω—ã–µ –≤–æ–ª–Ω—ã
    'VOLCANO': '#ff8c00', // –û—Ä–∞–Ω–∂–µ–≤—ã–π - –≤—É–ª–∫–∞–Ω—ã
    'TC': '#dc143c' // –ú–∞–ª–∏–Ω–æ–≤—ã–π - —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ —Ü–∏–∫–ª–æ–Ω—ã
  };

  return colors[phenomenon] || '#8892b0';
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è SIGMET
 */
export const getSigmetIcon = (phenomenon: string): string => {
  const icons: Record<string, string> = {
    'TS': '‚õàÔ∏è',
    'GR': 'üßä', 
    'TURB': 'üí®',
    'ICE': '‚ùÑÔ∏è',
    'MTW': '‚õ∞Ô∏è',
    'VOLCANO': 'üåã',
    'TC': 'üåÄ',
    'DS': 'üèúÔ∏è',
    'SS': 'üå™Ô∏è'
  };

  return icons[phenomenon] || '‚ö†Ô∏è';
};