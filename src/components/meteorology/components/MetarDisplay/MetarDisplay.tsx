// src/components/meteorology/components/MetarDisplay/MetarDisplay.tsx
import React, { useState } from 'react';
import { 
  getCloudCoverageText, 
  getWeatherConditionText, 
  getAirportName, 
  convertPressureToHpa,
  getModifiersDescription 
} from '../../utils';
import type { ParsedMetar } from '../../utils';
import {
  MetarContainer,
  RawMetar,
  DecodingTable,
  TableRow,
  ParameterCell,
  DecodingCell,
  ShowMoreButton,
  EducationalSection,
  EducationalContent,
  TimeInfo,
  RemarksSection,
  RemarkItem,
  RemarkTypeBadge
} from './MetarDisplay.styles';

interface MetarDisplayProps {
  rawMetar: string;
  metarData: ParsedMetar;
}

export const MetarDisplay: React.FC<MetarDisplayProps> = ({ rawMetar, metarData }) => {
  const [showEducational, setShowEducational] = useState(false);
  const [showRemarks, setShowRemarks] = useState(false);

  const formatTime = (timeString: string): string => {
    if (!timeString || timeString.length !== 7) return '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ';
    const day = timeString.slice(0, 2);
    const hour = timeString.slice(2, 4);
    const minute = timeString.slice(4, 6);
    return `${day} —á–∏—Å–ª–∞, ${hour}:${minute} UTC`;
  };

  const decodeWind = (wind: ParsedMetar['wind']): string => {
    if (wind.isCalm) {
      return '–®—Ç–∏–ª—å';
    }

    if (wind.direction === null) {
      return `–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä ${wind.speed} ${wind.unit.toLowerCase()}`;
    }
    
    let directionText = '';
    if (wind.direction >= 337.5 || wind.direction < 22.5) directionText = '–°–µ–≤–µ—Ä–Ω—ã–π';
    else if (wind.direction < 67.5) directionText = '–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π';
    else if (wind.direction < 112.5) directionText = '–í–æ—Å—Ç–æ—á–Ω—ã–π';
    else if (wind.direction < 157.5) directionText = '–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π';
    else if (wind.direction < 202.5) directionText = '–Æ–∂–Ω—ã–π';
    else if (wind.direction < 247.5) directionText = '–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π';
    else if (wind.direction < 292.5) directionText = '–ó–∞–ø–∞–¥–Ω—ã–π';
    else directionText = '–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π';

    let windText = `${directionText} (${wind.direction}¬∞) ${wind.speed} ${wind.unit.toLowerCase()}`;
    
    if (wind.gust) {
      windText += `, –ø–æ—Ä—ã–≤—ã –¥–æ ${wind.gust}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–∑–º–µ–Ω—è—é—â–µ–º—Å—è –≤–µ—Ç—Ä–µ –∏–∑ remarks
    const variableWindRemark = metarData.remarks.find(r => r.type === 'wind');
    if (variableWindRemark) {
      windText += `, ${variableWindRemark.description.toLowerCase()}`;
    }
    
    return windText;
  };

  const formatWindCode = (wind: ParsedMetar['wind']): string => {
    if (wind.direction === null) {
      return `VRB${wind.speed.toString().padStart(2, '0')}${wind.gust ? `G${wind.gust}` : ''}${wind.unit}`;
    }
    return `${wind.direction.toString().padStart(3, '0')}${wind.speed.toString().padStart(2, '0')}${wind.gust ? `G${wind.gust}` : ''}${wind.unit}`;
  };

  const formatPressure = (pressure: ParsedMetar['pressure']): string => {
    if (pressure.isInHg) {
      const pressureValue = pressure.value.toFixed(2);
      const hpaValue = convertPressureToHpa(pressure.value);
      return `${pressureValue} –¥—é–π–º–æ–≤ —Ä—Ç.—Å—Ç. (‚âà${Math.round(hpaValue)} –≥–ü–∞)`;
    } else {
      return `${pressure.value} –≥–ü–∞`;
    }
  };

  const formatPressureCode = (pressure: ParsedMetar['pressure']): string => {
    if (pressure.isInHg) {
      return `A${Math.round(pressure.value * 100).toString().padStart(4, '0')}`;
    } else {
      return `Q${pressure.value.toString().padStart(4, '0')}`;
    }
  };

  const formatVisibilityCode = (visibility: ParsedMetar['visibility']): string => {
    if (visibility.isCavok) return 'CAVOK';
    if (visibility.unit === 'SM') {
      return `${visibility.value}SM`; // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ + SM
    }
    return visibility.value === 10000 ? '9999' : visibility.value.toString();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
  const renderVisibilityVariations = (visibility: ParsedMetar['visibility']) => {
    if (!visibility.variations || visibility.variations.length === 0) return null;
    
    return (
      <div style={{ marginTop: '10px', padding: '10px', background: 'rgba(26, 111, 196, 0.1)', borderRadius: '4px' }}>
        <div style={{ fontSize: '0.9rem', color: '#ffd700', marginBottom: '5px' }}>
          –í–∏–¥–∏–º–æ—Å—Ç—å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:
        </div>
        {visibility.variations.map((variation, index) => (
          <div key={index} style={{ fontSize: '0.8rem', color: '#e6f1ff' }}>
            ‚Ä¢ {variation.value} –º –≤ {variation.description} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ({variation.direction})
          </div>
        ))}
      </div>
    );
  };

  const formatVisibilityText = (visibility: ParsedMetar['visibility']): string => {
    if (visibility.isCavok) {
      return '–í–∏–¥–∏–º–æ—Å—Ç—å ‚â•10 –∫–º, –Ω–µ—Ç –æ–±–ª–∞–∫–æ–≤ –Ω–∏–∂–µ 5000 ft, –Ω–µ—Ç –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π';
    }
    
    if (visibility.unit === 'SM') {
      let prefix = '';
      if (visibility.isLessThan) prefix = '–ú–µ–Ω–µ–µ ';
      if (visibility.isGreaterThan) prefix = '–ë–æ–ª–µ–µ ';
      
      const meters = visibility.metersValue || Math.round(visibility.value * 1609.34);
      return `${prefix}${visibility.value} —Å—Ç–∞—Ç—É—Ç–Ω—ã—Ö –º–∏–ª—å (‚âà${meters} –º)`;
    }
    
    if (visibility.value >= 10000) {
      return '–í–∏–¥–∏–º–æ—Å—Ç—å ‚â•10 –∫–º';
    }
    
    let prefix = '';
    if (visibility.isLessThan) prefix = '–ú–µ–Ω–µ–µ ';
    if (visibility.isGreaterThan) prefix = '–ë–æ–ª–µ–µ ';
    
    const baseText = `${prefix}${visibility.value} –º–µ—Ç—Ä–æ–≤`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞—Ü–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
    if (visibility.variations && visibility.variations.length > 0) {
      const variationsText = visibility.variations.map(v => 
        `${v.value} –º (${v.description})`
      ).join(', ');
      return `${baseText}. –õ–æ–∫–∞–ª—å–Ω–æ: ${variationsText}`;
    }
    
    return baseText;
  };

  const getRemarkTypeColor = (type: string): string => {
    const colors: Record<string, string> = {
      'weather': '#ff6b6b',
      'temperature': '#64ffda',
      'pressure': '#1a6fc4',
      'wind': '#ffd700',
      'runway': '#9d4edd',
      'system': '#8892b0',
      'other': '#e6f1ff'
    };
    return colors[type] || '#e6f1ff';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç–∏–ø–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
  const getRemarkIcon = (type: string): string => {
    const icons: Record<string, string> = {
      'weather': 'üå¶Ô∏è',
      'temperature': 'üå°Ô∏è',
      'pressure': 'üìä',
      'wind': 'üí®',
      'runway': 'üõ¨',
      'system': '‚öôÔ∏è',
      'other': 'üìù'
    };
    return icons[type] || 'üìù';
  };

  return (
    <MetarContainer>
      <RawMetar>
        <code>{rawMetar}</code>
        <TimeInfo>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {formatTime(metarData.observationTime)}</TimeInfo>
      </RawMetar>

      <DecodingTable>
        <thead>
          <TableRow>
            <ParameterCell>–ü–∞—Ä–∞–º–µ—Ç—Ä</ParameterCell>
            <ParameterCell>–ö–æ–¥ METAR</ParameterCell>
            <ParameterCell>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞</ParameterCell>
          </TableRow>
        </thead>
        <tbody>
          <TableRow>
            <ParameterCell>–ê—ç—Ä–æ–ø–æ—Ä—Ç</ParameterCell>
            <ParameterCell><code>{metarData.icaoCode}</code></ParameterCell>
            <DecodingCell>
              <div><strong>{getAirportName(metarData.icaoCode)}</strong></div>
              <div style={{ fontSize: '0.9rem', color: '#8892b0', marginTop: '5px' }}>
                –ö–æ–¥ ICAO: {metarData.icaoCode}
              </div>
            </DecodingCell>
          </TableRow>

          <TableRow>
            <ParameterCell>–í—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è</ParameterCell>
            <ParameterCell><code>{metarData.observationTime || 'N/A'}</code></ParameterCell>
            <DecodingCell>{formatTime(metarData.observationTime)}</DecodingCell>
          </TableRow>

          {/* –°–µ–∫—Ü–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã */}
          {(metarData.modifiers.isAuto || 
            metarData.modifiers.isCorrected || 
            metarData.modifiers.isAmended || 
            metarData.modifiers.isMissing) && (
            <TableRow>
              <ParameterCell>–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã</ParameterCell>
              <ParameterCell>
                <code>
                  {metarData.modifiers.isAuto && 'AUTO '}
                  {metarData.modifiers.isCorrected && 'COR '}
                  {metarData.modifiers.isAmended && 'AMD '}
                  {metarData.modifiers.isMissing && 'NIL'}
                </code>
              </ParameterCell>
              <DecodingCell>
                {getModifiersDescription(metarData.modifiers).map((desc: string, idx: number) => (
                  <div key={idx} style={{ color: '#ffd700', marginBottom: '5px' }}>
                    {desc}
                  </div>
                ))}
              </DecodingCell>
            </TableRow>
          )}

          <TableRow>
            <ParameterCell>–í–µ—Ç–µ—Ä</ParameterCell>
            <ParameterCell>
              <code>{formatWindCode(metarData.wind)}</code>
              {metarData.wind.variableFrom && metarData.wind.variableTo && (
                <div style={{ fontSize: '0.8rem', color: '#ffd700', marginTop: '5px' }}>
                  {metarData.wind.variableFrom}V{metarData.wind.variableTo}
                </div>
              )}
            </ParameterCell>
            <DecodingCell>
              {decodeWind(metarData.wind)}
              {metarData.wind.variableFrom && metarData.wind.variableTo && (
                <div style={{ color: '#ffd700', fontSize: '0.9rem', marginTop: '5px' }}>
                  üí® –í–µ—Ç–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç {metarData.wind.variableFrom}¬∞ –¥–æ {metarData.wind.variableTo}¬∞
                </div>
              )}
            </DecodingCell>
          </TableRow>

          <TableRow>
            <ParameterCell>–í–∏–¥–∏–º–æ—Å—Ç—å</ParameterCell>
            <ParameterCell>
              <code>{formatVisibilityCode(metarData.visibility)}</code>
              {metarData.visibility.unit === 'SM' && (
                <div style={{ fontSize: '0.8rem', color: '#ffd700', marginTop: '5px' }}>
                  –≤ —Å—Ç–∞—Ç—É—Ç–Ω—ã—Ö –º–∏–ª—è—Ö
                </div>
              )}
              {metarData.visibility.variations && metarData.visibility.variations.length > 0 && (
                <div style={{ fontSize: '0.8rem', color: '#ffd700', marginTop: '5px' }}>
                  + {metarData.visibility.variations.length} –Ω–∞–ø—Ä–∞–≤–ª.
                </div>
              )}
            </ParameterCell>
            <DecodingCell>
              {formatVisibilityText(metarData.visibility)}
              {renderVisibilityVariations(metarData.visibility)}
            </DecodingCell>
          </TableRow>

          {metarData.weatherConditions.length > 0 && (
            <TableRow>
              <ParameterCell>–ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è</ParameterCell>
              <ParameterCell>
                <code>{metarData.weatherConditions.join(' ')}</code>
              </ParameterCell>
              <DecodingCell>
                {metarData.weatherConditions.map(condition => 
                  getWeatherConditionText(condition)
                ).join(', ')}
              </DecodingCell>
            </TableRow>
          )}

          {metarData.clouds.length > 0 ? (
            metarData.clouds.map((cloud, index) => (
              <TableRow key={index}>
                <ParameterCell>–û–±–ª–∞—á–Ω–æ—Å—Ç—å {index + 1}</ParameterCell>
                <ParameterCell>
                  <code>{cloud.coverage}{(cloud.altitude / 100).toString().padStart(3, '0')}</code>
                </ParameterCell>
                <DecodingCell>
                  {getCloudCoverageText(cloud.coverage)} —Å –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ–π {cloud.altitude} ft
                  {cloud.isVerticalVisibility && ' (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å)'}
                </DecodingCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <ParameterCell>–û–±–ª–∞—á–Ω–æ—Å—Ç—å</ParameterCell>
              <ParameterCell><code>NSC</code></ParameterCell>
              <DecodingCell>–ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏</DecodingCell>
            </TableRow>
          )}

          <TableRow>
            <ParameterCell>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–¢–æ—á–∫–∞ —Ä–æ—Å—ã</ParameterCell>
            <ParameterCell>
              <code>{metarData.temperature.value}/{metarData.temperature.dewpoint}</code>
            </ParameterCell>
            <DecodingCell>
              –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {metarData.temperature.value}¬∞C, –¢–æ—á–∫–∞ —Ä–æ—Å—ã: {metarData.temperature.dewpoint}¬∞C
            </DecodingCell>
          </TableRow>

          <TableRow>
            <ParameterCell>–î–∞–≤–ª–µ–Ω–∏–µ</ParameterCell>
            <ParameterCell>
              <code>{formatPressureCode(metarData.pressure)}</code>
            </ParameterCell>
            <DecodingCell>{formatPressure(metarData.pressure)}</DecodingCell>
          </TableRow>

          {metarData.runwayConditions.length > 0 && (
            metarData.runwayConditions.map((runway, index) => (
              <TableRow key={`runway-${index}`}>
                <ParameterCell>–°–æ—Å—Ç–æ—è–Ω–∏–µ –í–ü–ü {runway.runway}</ParameterCell>
                <ParameterCell>
                  <code>R{runway.runway}/{runway.conditionCode}</code>
                </ParameterCell>
                <DecodingCell>
                  {runway.conditionCode.startsWith('CLRD') ? (
                    <div style={{ lineHeight: '1.6', color: '#64ffda' }}>
                      <div style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: '10px',
                        fontWeight: 'bold',
                        marginBottom: '10px'
                      }}>
                        <span style={{ fontSize: '1.2rem' }}>‚úÖ</span>
                        <span>–ü–û–õ–û–°–ê –ß–ò–°–¢–ê–Ø</span>
                      </div>
                      <div><strong>–°—Ç–∞—Ç—É—Å:</strong> –û—á–∏—â–µ–Ω–∞ –∏ —Å—É—Ö–∞—è</div>
                      <div><strong>–ü–æ–∫—Ä—ã—Ç–∏–µ:</strong> –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>
                      <div><strong>–°—Ü–µ–ø–ª–µ–Ω–∏–µ:</strong> {runway.friction || '–û—Ç–ª–∏—á–Ω–æ–µ'}</div>
                      {runway.conditionCode.length > 4 && (
                        <div><strong>–ö–æ–¥:</strong> {runway.conditionCode}</div>
                      )}
                    </div>
                  ) : (
                    <div style={{ lineHeight: '1.6' }}>
                      {runway.depositType ? (
                        <div><strong>–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è:</strong> {runway.depositType}</div>
                      ) : (
                        <div><strong>–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è:</strong> –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                      )}
                      {runway.contamination ? (
                        <div><strong>–ü–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è:</strong> {runway.contamination}</div>
                      ) : (
                        <div><strong>–ü–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è:</strong> –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                      )}
                      {runway.depth ? (
                        <div><strong>–ì–ª—É–±–∏–Ω–∞:</strong> {runway.depth}</div>
                      ) : (
                        <div><strong>–ì–ª—É–±–∏–Ω–∞:</strong> –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                      )}
                      {runway.friction ? (
                        <div><strong>–°—Ü–µ–ø–ª–µ–Ω–∏–µ:</strong> {runway.friction}</div>
                      ) : (
                        <div><strong>–°—Ü–µ–ø–ª–µ–Ω–∏–µ:</strong> –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                      )}
                    </div>
                  )}
                </DecodingCell>
              </TableRow>
            ))
          )}

          {/* –°–µ–∫—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–Ω–¥—ã */}
          {metarData.trends && metarData.trends.length > 0 && (
            <TableRow>
              <ParameterCell>–¢—Ä–µ–Ω–¥—ã</ParameterCell>
              <ParameterCell>
                <code>{metarData.trends.map(t => t.type).join(' ')}</code>
              </ParameterCell>
              <DecodingCell>
                {metarData.trends.map((trend, idx: number) => (
                  <div key={idx} style={{ marginBottom: '5px' }}>
                    <strong>{trend.type}:</strong> {trend.forecast?.description || '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π'}
                  </div>
                ))}
              </DecodingCell>
            </TableRow>
          )}
        </tbody>
      </DecodingTable>

      {/* –°–µ–∫—Ü–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏–π */}
      {metarData.remarks.length > 0 && (
        <RemarksSection>
          <ShowMoreButton 
            onClick={() => setShowRemarks(!showRemarks)}
            isActive={showRemarks}
          >
            {showRemarks ? 'üìã –°–∫—Ä—ã—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è' : `üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (${metarData.remarks.length})`}
          </ShowMoreButton>

          {showRemarks && (
            <div style={{ marginTop: '15px' }}>
              <h4 style={{ 
                color: '#64ffda', 
                marginBottom: '15px',
                display: 'flex',
                alignItems: 'center',
                gap: '10px'
              }}>
                <span>üìã</span>
                <span>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</span>
              </h4>
              
              <div style={{ 
                display: 'grid', 
                gap: '10px',
                gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))'
              }}>
                {metarData.remarks.map((remark, index) => (
                  <RemarkItem key={index} type={remark.type}>
                    <div style={{ display: 'flex', alignItems: 'flex-start', gap: '10px' }}>
                      <div style={{ 
                        fontSize: '1.2rem',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        width: '30px'
                      }}>
                        {getRemarkIcon(remark.type)}
                      </div>
                      
                      <div style={{ flex: 1 }}>
                        <div style={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          gap: '10px',
                          marginBottom: '5px'
                        }}>
                          <RemarkTypeBadge style={{ backgroundColor: getRemarkTypeColor(remark.type) }}>
                            {remark.type}
                          </RemarkTypeBadge>
                          <code style={{ 
                            background: 'rgba(100, 255, 218, 0.1)',
                            padding: '2px 6px',
                            borderRadius: '4px',
                            color: '#64ffda',
                            fontSize: '0.8rem'
                          }}>
                            {remark.code}
                          </code>
                        </div>
                        
                        <div style={{ 
                          color: '#e6f1ff', 
                          fontSize: '0.9rem',
                          lineHeight: '1.4'
                        }}>
                          {remark.description}
                        </div>
                        
                        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ */}
                        {remark.details && (
                          <div style={{ 
                            marginTop: '5px',
                            fontSize: '0.8rem',
                            color: '#8892b0'
                          }}>
                            {Object.entries(remark.details).map(([key, value]) => (
                              <div key={key}>
                                <strong>{key}:</strong> {String(value)}
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </RemarkItem>
                ))}
              </div>
            </div>
          )}
        </RemarksSection>
      )}

      <ShowMoreButton 
        onClick={() => setShowEducational(!showEducational)}
        isActive={showEducational}
      >
        {showEducational ? '‚ùì –°–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É' : '‚ùì –ö–∞–∫ —á–∏—Ç–∞—Ç—å METAR?'}
      </ShowMoreButton>

      {showEducational && (
        <EducationalSection>
          <EducationalContent>
            <h3>üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ METAR</h3>
            <p>METAR (Meteorological Aerodrome Report) ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç–µ–æ—Å–≤–æ–¥–∫–∏ –¥–ª—è –∞—ç—Ä–æ–¥—Ä–æ–º–æ–≤.</p>
            
            <h4>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</h4>
            <ul>
              <li><strong>AAAA</strong> ‚Äî –ö–æ–¥ ICAO –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ (4 –±—É–∫–≤—ã)</li>
              <li><strong>DDHHMMZ</strong> ‚Äî –î–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–¥–µ–Ω—å, —á–∞—Å, –º–∏–Ω—É—Ç—ã, Z=UTC)</li>
              <li><strong>DDDSSGSSUU</strong> ‚Äî –í–µ—Ç–µ—Ä (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ¬∞, —Å–∫–æ—Ä–æ—Å—Ç—å, –ø–æ—Ä—ã–≤—ã, –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è)</li>
              <li><strong>VVVV</strong> ‚Äî –í–∏–¥–∏–º–æ—Å—Ç—å (–º–µ—Ç—Ä—ã) –∏–ª–∏ CAVOK</li>
              <li><strong>WW</strong> ‚Äî –ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (RA-–¥–æ–∂–¥—å, SN-—Å–Ω–µ–≥, FG-—Ç—É–º–∞–Ω)</li>
              <li><strong>NNNHHH</strong> ‚Äî –û–±–ª–∞—á–Ω–æ—Å—Ç—å (—Ç–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è + –≤—ã—Å–æ—Ç–∞ –≤ —Å–æ—Ç–Ω—è—Ö ft)</li>
              <li><strong>T/Td</strong> ‚Äî –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–¢–æ—á–∫–∞ —Ä–æ—Å—ã</li>
              <li><strong>QPPPP</strong> ‚Äî –î–∞–≤–ª–µ–Ω–∏–µ QNH (–≥–ü–∞) –∏–ª–∏ <strong>APPPP</strong> (–¥—é–π–º—ã —Ä—Ç.—Å—Ç.)</li>
              <li><strong>Rxx/xxxxxx</strong> ‚Äî –°–æ—Å—Ç–æ—è–Ω–∏–µ –í–ü–ü (—Ç–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è, –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ, –≥–ª—É–±–∏–Ω–∞, —Å—Ü–µ–ø–ª–µ–Ω–∏–µ)</li>
              <li><strong>RMK</strong> ‚Äî –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
            </ul>

            <h4>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (RMK):</h4>
            <ul>
              <li><strong>QBBxxx</strong> - –í—ã—Å–æ—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –æ–±–ª–∞–∫–æ–≤ (xxx √ó 100 ft = –æ–±—â–∞—è –≤—ã—Å–æ—Ç–∞ –≤ —Ñ—É—Ç–∞—Ö)</li>
              <li><strong>–ü—Ä–∏–º–µ—Ä: QBB060</strong> - 060 √ó 100 = 6000 ft (‚âà1829 –º)</li>
              <li><strong>–í–∏–¥–∏–º–æ—Å—Ç—å 3900 1800NW</strong> - –û—Å–Ω–æ–≤–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å 3900–º, –≤ —Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ 1800–º</li>
              <li><strong>R06R/290151</strong> - –°–æ—Å—Ç–æ—è–Ω–∏–µ –í–ü–ü 06R: —Ç–∏–ø 2, –ø–æ–∫—Ä—ã—Ç–∏–µ 90%, –≥–ª—É–±–∏–Ω–∞ 01–º–º, —Å—Ü–µ–ø–ª–µ–Ω–∏–µ 51</li>
            </ul>

            <h4>–¢–∏–ø—ã –ø—Ä–∏–º–µ—á–∞–Ω–∏–π (RMK):</h4>
            <ul>
              <li><strong style={{ color: '#ff6b6b' }}>üå¶Ô∏è –ü–æ–≥–æ–¥–∞</strong> - –Ω–∞—á–∞–ª–æ/–æ–∫–æ–Ω—á–∞–Ω–∏–µ —è–≤–ª–µ–Ω–∏–π</li>
              <li><strong style={{ color: '#64ffda' }}>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</strong> - —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</li>
              <li><strong style={{ color: '#1a6fc4' }}>üìä –î–∞–≤–ª–µ–Ω–∏–µ</strong> - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
              <li><strong style={{ color: '#ffd700' }}>üí® –í–µ—Ç–µ—Ä</strong> - –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</li>
              <li><strong style={{ color: '#9d4edd' }}>üõ¨ –í–ü–ü</strong> - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è</li>
              <li><strong style={{ color: '#8892b0' }}>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞</strong> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏</li>
            </ul>

            <h4>–ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –í–ü–ü:</h4>
            <ul>
              <li><strong>–ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞</strong> - —Ç–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è (0-—Å—É—Ö–∞—è, 1-–≤–ª–∞–∂–Ω–∞—è, 2-–ª—É–∂–∏, 3-–∏–Ω–µ–π, 4-—Å–Ω–µ–≥)</li>
              <li><strong>–í—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞</strong> - –ø–æ–∫—Ä—ã—Ç–∏–µ (1-10%, 2-25%, 5-50%, 9-100%)</li>
              <li><strong>–¢—Ä–µ—Ç—å—è-—á–µ—Ç–≤–µ—Ä—Ç–∞—è</strong> - –≥–ª—É–±–∏–Ω–∞ (–º–º)</li>
              <li><strong>–ü—è—Ç–∞—è-—à–µ—Å—Ç–∞—è</strong> - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ü–µ–ø–ª–µ–Ω–∏—è</li>
            </ul>
          </EducationalContent>
        </EducationalSection>
      )}
    </MetarContainer>
  );
};