// src/components/meteorology/components/TafDisplay/TafDisplay.tsx
import React from 'react';
import type { ParsedTaf, TafForecast, TafWeather, TafCloud } from '../../utils/tafParser';
import { 
  getWindDescription, 
  getVisibilityDescription, 
  getWeatherDescription, 
  getCloudDescriptionWithHazards,
  getCbHazardsDescription,
  getTurbulenceDescription,
  getIcingDescription,
  formatTafTimeForDisplay
} from '../../utils/tafParser';
import {
  TafContainer,
  TafHeader,
  TafCode,
  PeriodCard,
  PeriodHeader,
  WeatherGrid,
  WeatherItem,
  WeatherValue,
  WeatherGroup,
  ChangeIndicator,
  DangerSection,
  StatusIndicator,
  InfoSection
} from './TafDisplay.styles';

interface TafDisplayProps {
  tafData: ParsedTaf | null;
  icaoCode: string;
}

export const TafDisplay: React.FC<TafDisplayProps> = ({ tafData, icaoCode }) => {
  if (!tafData) {
    return (
      <TafContainer>
        <div style={{ textAlign: 'center', padding: '40px', color: '#8892b0' }}>
          <h3 style={{ color: '#ff6b6b', marginBottom: '15px' }}>‚ùå –î–∞–Ω–Ω—ã–µ TAF –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å TAF –¥–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ {icaoCode}</p>
        </div>
      </TafContainer>
    );
  }

  const getChangeTypeInfo = (type?: string, probability?: number) => {
    const types: Record<string, { icon: string; name: string; description: string; color: string }> = {
      'BECMG': {
        icon: 'üîÑ',
        name: 'BECMG',
        description: '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ',
        color: '#1a6fc4'
      },
      'TEMPO': {
        icon: '‚è±Ô∏è', 
        name: 'TEMPO',
        description: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è',
        color: '#ffd700'
      },
      'PROB': {
        icon: 'üé≤',
        name: `PROB${probability || 30}`,
        description: `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ${probability || 30}%`,
        color: '#9d4edd'
      },
      'FM': {
        icon: 'üõ¨',
        name: 'FM',
        description: '–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ',
        color: '#64ffda'
      }
    };

    return types[type || ''] || { 
      icon: 'üìä', 
      name: '–û–°–ù–û–í–ù–û–ô', 
      description: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑',
      color: '#8892b0'
    };
  };

  const getWeatherIcon = (phenomenon: string): string => {
    const icons: Record<string, string> = {
      'RA': 'üåßÔ∏è', 'SN': '‚ùÑÔ∏è', 'FG': 'üå´Ô∏è', 'BR': 'üí®', 'HZ': 'üò∂‚Äçüå´Ô∏è',
      'TS': '‚õàÔ∏è', 'DZ': 'üå¶Ô∏è', 'GR': 'üßä', 'GS': 'üå®Ô∏è', 'PL': 'üåßÔ∏è‚ùÑÔ∏è',
      'SG': 'üå®Ô∏è', 'IC': 'üßä', 'UP': 'üíß', 'SQ': 'üí®', 'FC': 'üå™Ô∏è',
      'DS': 'üèúÔ∏è', 'SS': 'üå™Ô∏è', 'VA': 'üåã', 'PO': 'üåÄ', 'DU': 'üèúÔ∏è',
      'SA': 'üå™Ô∏è'
    };
    return icons[phenomenon] || 'üå§Ô∏è';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
  const hasForecastData = (period: TafForecast): boolean => {
    return !!(period.wind || period.visibility || 
             (period.weather && period.weather.length > 0) || 
             (period.clouds && period.clouds.length > 0) ||
             period.turbulence || period.icing ||
             (period.temperature && period.temperature.length > 0));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
const renderForecastElements = (period: TafForecast, changeType?: string) => {
  const elements: React.ReactElement[] = [];
  const isChangePeriod = !!changeType;
  const isFmPeriod = changeType === 'FM';

  // –í–µ—Ç–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (period.wind) {
    elements.push(
      <WeatherItem key="wind">
        <div className="weather-label">
          <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>üí®</span>
          –í–µ—Ç–µ—Ä
        </div>
        <WeatherValue>
          {getWindDescription(period.wind)}
        </WeatherValue>
      </WeatherItem>
    );
  } else if (!isChangePeriod || isFmPeriod) {
    elements.push(
      <WeatherItem key="wind">
        <div className="weather-label">
          <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>üí®</span>
          –í–µ—Ç–µ—Ä
        </div>
        <WeatherValue>
          –ù–µ —É–∫–∞–∑–∞–Ω
        </WeatherValue>
      </WeatherItem>
    );
  }

  // –í–∏–¥–∏–º–æ—Å—Ç—å - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
  if (period.visibility) {
    elements.push(
      <WeatherItem key="visibility">
        <div className="weather-label">
          <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>üëÅÔ∏è</span>
          –í–∏–¥–∏–º–æ—Å—Ç—å
        </div>
        <WeatherValue>
          {getVisibilityDescription(period.visibility)}
        </WeatherValue>
      </WeatherItem>
    );
  } else if (!isChangePeriod || isFmPeriod) {
    elements.push(
      <WeatherItem key="visibility">
        <div className="weather-label">
          <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>üëÅÔ∏è</span>
          –í–∏–¥–∏–º–æ—Å—Ç—å
        </div>
        <WeatherValue>
          –ù–µ —É–∫–∞–∑–∞–Ω–∞
        </WeatherValue>
      </WeatherItem>
    );
  }

  // –ù–û–í–û–ï: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏)
  if (period.verticalVisibility) {
    elements.push(
      <WeatherItem key="vertical-visibility">
        <div className="weather-label">
          <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>‚¨áÔ∏è</span>
          –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
        </div>
        <WeatherValue>
          <div className="vertical-visibility-item">
            <strong>{period.verticalVisibility.altitude} ft</strong>
            <div style={{ fontSize: '0.8rem', color: '#8892b0', marginTop: '2px' }}>
              (–ù–µ–±–æ –Ω–µ –≤–∏–¥–Ω–æ)
            </div>
          </div>
        </WeatherValue>
      </WeatherItem>
    );
  }

  // –ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞
  elements.push(
    <WeatherItem key="weather">
      <div className="weather-label">
        <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>üå¶Ô∏è</span>
        –ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è
      </div>
      <WeatherValue>
        {period.weather && period.weather.length > 0 ? (
          <WeatherGroup>
            {period.weather.map((weather: TafWeather, idx: number) => (
              <div key={idx} className="weather-badge">
                <span style={{ marginRight: '5px' }}>
                  {getWeatherIcon(weather.phenomena[0])}
                </span>
                {getWeatherDescription(weather)}
                <code className="weather-code">{weather.raw}</code>
              </div>
            ))}
          </WeatherGroup>
        ) : (
          <span style={{ color: '#64ffda' }}>
            {isChangePeriod && !isFmPeriod ? '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π' : '–ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π'}
          </span>
        )}
      </WeatherValue>
    </WeatherItem>
  );

  // –û–±–ª–∞—á–Ω–æ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º VV –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∞–∫–æ–≤
  elements.push(
    <WeatherItem key="clouds">
      <div className="weather-label">
        <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>‚òÅÔ∏è</span>
        –û–±–ª–∞—á–Ω–æ—Å—Ç—å
      </div>
      <WeatherValue>
        {period.clouds && period.clouds.filter(cloud => !cloud.isVerticalVisibility).length > 0 ? (
          <WeatherGroup>
            {period.clouds
              .filter(cloud => !cloud.isVerticalVisibility) // –ò—Å–∫–ª—é—á–∞–µ–º VV –∏–∑ –æ–±–ª–∞–∫–æ–≤
              .map((cloud: TafCloud, idx: number) => (
                <div key={idx} className={`cloud-item ${cloud.isCeiling ? 'ceiling' : ''} ${cloud.type === 'CB' ? 'cb' : ''}`}>
                  <div className="cloud-header">
                    <strong>{cloud.coverage.toUpperCase()}{cloud.type ? `/${cloud.type}` : ''}</strong>
                    <span>–Ω–∞ {cloud.altitude} ft</span>
                  </div>
                  <div className="cloud-description">
                    {getCloudDescriptionWithHazards(cloud)}
                  </div>
                </div>
              ))}
          </WeatherGroup>
        ) : (
          <span style={{ color: '#64ffda' }}>
            {isChangePeriod && !isFmPeriod ? '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π' : '–ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏'}
          </span>
        )}
      </WeatherValue>
    </WeatherItem>
  );

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è FM –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–∞–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    if (isFmPeriod) {
      return <WeatherGrid>{elements}</WeatherGrid>;
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ç–∫—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    if (isChangePeriod) {
      const changeElements = elements.filter(element => {
        // –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –≥–¥–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        const key = element.key;
        if (key === 'wind' && !period.wind) return false;
        if (key === 'visibility' && !period.visibility) return false;
        if (key === 'weather' && (!period.weather || period.weather.length === 0)) return false;
        if (key === 'clouds' && (!period.clouds || period.clouds.length === 0)) return false;
        return true;
      });

      if (changeElements.length === 0) {
        return (
          <div style={{ 
            textAlign: 'center', 
            padding: '20px', 
            color: '#8892b0',
            fontStyle: 'italic'
          }}>
            –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã—Ö
          </div>
        );
      }

      return <WeatherGrid>{changeElements}</WeatherGrid>;
    }

    // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    return <WeatherGrid>{elements}</WeatherGrid>;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π
  const renderDangerElements = (period: TafForecast, changeType?: string) => {
    const dangerElements: React.ReactElement[] = [];
    const isChangePeriod = !!changeType;

    // –û–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (—Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å, –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏–µ)
    if (period.turbulence || period.icing) {
      dangerElements.push(
        <DangerSection key="danger">
          <h4>‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è</h4>
          <div className="danger-grid">
            {period.turbulence && (
              <div className="danger-item">
                <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>üí®</span>
                {getTurbulenceDescription(period.turbulence)}
              </div>
            )}
            {period.icing && (
              <div className="danger-item">
                <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>üßä</span>
                {getIcingDescription(period.icing)}
              </div>
            )}
          </div>
        </DangerSection>
      );
    }

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è CB –æ–±–ª–∞–∫–æ–≤
    const cbHazards = getCbHazardsDescription(period.clouds || []);
    if (cbHazards.length > 0) {
      dangerElements.push(
        <DangerSection key="cb-hazards">
          <h4>üå©Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç–∏ CB –æ–±–ª–∞–∫–æ–≤</h4>
          <div className="danger-grid">
            {cbHazards.map((hazard, idx) => (
              <div key={idx} className="danger-item">
                ‚Ä¢ {hazard}
              </div>
            ))}
          </div>
        </DangerSection>
      );
    }

    // –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è
    if (isChangePeriod && dangerElements.length === 0) {
      return null;
    }

    return dangerElements;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  const renderTemperature = (period: TafForecast, changeType?: string) => {
    const isChangePeriod = !!changeType;
    
    if (!period.temperature || period.temperature.length === 0) {
      // –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (isChangePeriod) return null;
      
      // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –±–ª–æ–∫
      return (
        <WeatherGrid>
          <WeatherItem>
            <div className="weather-label">
              <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>üå°Ô∏è</span>
              –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            </div>
            <WeatherValue>
              <span style={{ color: '#8892b0' }}>–ù–µ —É–∫–∞–∑–∞–Ω–∞</span>
            </WeatherValue>
          </WeatherItem>
        </WeatherGrid>
      );
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã - —Å–Ω–∞—á–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è, –ø–æ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è
    const sortedTemperatures = [...period.temperature].sort((a, b) => {
      if (a.type === 'max' && b.type === 'min') return -1;
      if (a.type === 'min' && b.type === 'max') return 1;
      return 0;
    });

    return (
      <WeatherGrid>
        {sortedTemperatures.map((temp, idx) => (
          <WeatherItem key={`${temp.type}-${idx}`}>
            <div className="weather-label">
              <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>
                {temp.type === 'max' ? 'üìà' : 'üìâ'}
              </span>
              {temp.type === 'max' ? '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è' : '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è'} —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            </div>
            <WeatherValue>
              <strong>{temp.value > 0 ? '+' : ''}{temp.value}¬∞C</strong>
              <div style={{ fontSize: '0.8rem', color: '#8892b0', marginTop: '2px' }}>
                –≤ {formatTafTimeForDisplay(temp.time)}
              </div>
            </WeatherValue>
          </WeatherItem>
        ))}
      </WeatherGrid>
    );
  };

  return (
    <TafContainer>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <TafHeader>
        <div className="header-main">
          <h3>üìÖ –ê–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (TAF) - {tafData.icaoCode || icaoCode}</h3>
          <StatusIndicator>
            ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
          </StatusIndicator>
        </div>
        <div className="taf-meta">
          <InfoSection>
            <WeatherValue>
              <strong>–í—ã–ø—É—â–µ–Ω:</strong> {formatTafTimeForDisplay(tafData.issuanceTime)}
            </WeatherValue>
          </InfoSection>
          <InfoSection>
            <WeatherValue>
              <strong>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:</strong> {formatTafTimeForDisplay(tafData.validity.from)} ‚Äî {formatTafTimeForDisplay(tafData.validity.to)}
            </WeatherValue>
          </InfoSection>
          <InfoSection>
            <WeatherValue>
              <strong>–ü–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞:</strong> {tafData.forecast.length}
            </WeatherValue>
          </InfoSection>
        </div>
      </TafHeader>

      {/* –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ TAF */}
      <div style={{ marginBottom: '25px' }}>
        <h4 style={{ color: '#64ffda', marginBottom: '10px' }}>üìã –ò—Å—Ö–æ–¥–Ω—ã–π TAF:</h4>
        <TafCode>{tafData.raw}</TafCode>
      </div>

      {/* –ü–µ—Ä–∏–æ–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ */}
      <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
        {tafData.forecast.map((period, index) => {
          const changeInfo = getChangeTypeInfo(period.changeType, period.probability);
          const hasDanger = !!(period.turbulence || period.icing || period.clouds?.some(c => c.type === 'CB'));
          const isChangePeriod = !!period.changeType;
          
          return (
            <PeriodCard key={index} $hasDanger={hasDanger}>
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞ */}
              <PeriodHeader>
                <div className="period-main">
                  <ChangeIndicator color={changeInfo.color}>
                    {changeInfo.icon} {changeInfo.name}
                    {period.probability && ` ${period.probability}%`}
                  </ChangeIndicator>
                  <div className="period-time">
                    {formatTafTimeForDisplay(period.validity.from)} ‚Äî {formatTafTimeForDisplay(period.validity.to)}
                  </div>
                </div>
                <div className="period-description">
                  {changeInfo.description}
                  {isChangePeriod && !hasForecastData(period) && (
                    <span style={{ color: '#ffd700', marginLeft: '10px' }}>
                      (–û–±—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
                    </span>
                  )}
                </div>
              </PeriodHeader>

              {/* –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
              {renderForecastElements(period, period.changeType)}

              {/* –û–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è */}
              {renderDangerElements(period, period.changeType)}

              {/* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ */}
              {renderTemperature(period, period.changeType)}
            </PeriodCard>
          );
        })}
      </div>
    </TafContainer>
  );
};