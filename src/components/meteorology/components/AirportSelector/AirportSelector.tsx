// src/components/meteorology/components/AirportSelector/AirportSelector.tsx
import React, { useState, useMemo, useEffect } from 'react';
import { 
  SelectorContainer, 
  InputGroup, 
  AirportInput, 
  SearchButton, 
  RecentAirports, 
  RecentButton,
  Label,
  SuggestionsList,
  SuggestionItem,
  ModalButton
} from './AirportSelector.styles';
import { AirportModal } from '../AirportModal/AirportModal';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
const AIRPORT_DATABASE = [
  { icao: 'UUEE', name: '–®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ, –ú–æ—Å–∫–≤–∞' },
  { icao: 'UUDD', name: '–î–æ–º–æ–¥–µ–¥–æ–≤–æ, –ú–æ—Å–∫–≤–∞' },
  { icao: 'UUWW', name: '–í–Ω—É–∫–æ–≤–æ, –ú–æ—Å–∫–≤–∞' },
  { icao: 'URSS', name: '–°–æ—á–∏' },
  { icao: 'URMM', name: '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã' },
  { icao: 'URKK', name: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä' },
  { icao: 'USSS', name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
  { icao: 'UWGG', name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥' },
  { icao: 'UWWW', name: '–°–∞–º–∞—Ä–∞' },
  { icao: 'UNNT', name: '–¢–æ–ª–º–∞—á–µ–≤–æ, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
  { icao: 'ULLI', name: '–ü—É–ª–∫–æ–≤–æ, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
  { icao: 'UHWW', name: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫' },
  { icao: 'UHHH', name: '–•–∞–±–∞—Ä–æ–≤—Å–∫' },
  { icao: 'UWKS', name: '–ö—É—Ä–≥–∞–Ω' },
  { icao: 'UOOO', name: '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π' },
  { icao: 'KJFK', name: 'JFK, –ù—å—é-–ô–æ—Ä–∫' },
  { icao: 'KLAX', name: '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å' },
  { icao: 'EGLL', name: '–•–∏—Ç—Ä–æ—É, –õ–æ–Ω–¥–æ–Ω' },
  { icao: 'LFPG', name: '–®–∞—Ä–ª—å –¥–µ –ì–æ–ª–ª—å, –ü–∞—Ä–∏–∂' },
  { icao: 'EDDF', name: '–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç' },
  { icao: 'UAAA', name: '–ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  { icao: 'ZBAA', name: '–ü–µ–∫–∏–Ω –°—Ç–æ–ª–∏—á–Ω—ã–π, –ö–∏—Ç–∞–π' },
  { icao: 'RJTT', name: '–¢–æ–∫–∏–æ –•–∞–Ω—ç–¥–∞, –Ø–ø–æ–Ω–∏—è' },
];

interface AirportSelectorProps {
  icaoCode: string;
  onCodeChange: (code: string) => void;
  onSearch: (code: string) => void;
  recentAirports: string[];
  loading: boolean;
}

export const AirportSelector: React.FC<AirportSelectorProps> = ({
  icaoCode,
  onCodeChange,
  onSearch,
  recentAirports,
  loading
}) => {
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [localError, setLocalError] = useState<string | null>(null);
  const [inputValue, setInputValue] = useState(icaoCode);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  useEffect(() => {
    setInputValue(icaoCode);
  }, [icaoCode]);

  const suggestions = useMemo(() => {
    if (!inputValue || inputValue.length < 2) return [];
    
    return AIRPORT_DATABASE.filter(airport =>
      airport.icao.toLowerCase().includes(inputValue.toLowerCase()) ||
      airport.name.toLowerCase().includes(inputValue.toLowerCase())
    ).slice(0, 5);
  }, [inputValue]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è ICAO –∫–æ–¥–∞
  const validateIcaoCode = (code: string): boolean => {
    const codeUpper = code.toUpperCase().trim();
    return codeUpper.length === 4 && /^[A-Z]{4}$/.test(codeUpper);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setShowSuggestions(false);
    
    const codeToSearch = inputValue.trim().toUpperCase();
    
    if (!codeToSearch) {
      setLocalError('–í–≤–µ–¥–∏—Ç–µ ICAO –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞');
      return;
    }
    
    if (!validateIcaoCode(codeToSearch)) {
      setLocalError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ICAO –∫–æ–¥ (4 –±—É–∫–≤—ã)');
      return;
    }
    
    setLocalError(null);
    onSearch(codeToSearch);
  };

  const handleInputChange = (value: string) => {
    const upperValue = value.toUpperCase();
    setInputValue(upperValue);
    onCodeChange(upperValue);
    setShowSuggestions(value.length >= 2);
    setLocalError(null);
  };

  const handleSuggestionClick = (icao: string) => {
    setInputValue(icao);
    onCodeChange(icao);
    setShowSuggestions(false);
    setLocalError(null);
    onSearch(icao);
  };

  const handleRecentClick = (code: string) => {
    setInputValue(code);
    onCodeChange(code);
    setShowSuggestions(false);
    setLocalError(null);
    onSearch(code);
  };

  const handleModalSelect = (icao: string) => {
    setInputValue(icao);
    onCodeChange(icao);
    setShowModal(false);
    setLocalError(null);
    onSearch(icao);
  };

  return (
    <>
      <SelectorContainer>
        <form onSubmit={handleSubmit}>
          <Label htmlFor="airport-code">
            <span style={{ fontSize: '1.5rem', marginRight: '10px' }}>‚úàÔ∏è</span>
            –í–≤–µ–¥–∏—Ç–µ ICAO –∫–æ–¥ –∞—ç—Ä–æ–¥—Ä–æ–º–∞:
          </Label>
          
          <InputGroup>
            <div style={{ position: 'relative', flex: 1 }}>
              <AirportInput
                id="airport-code"
                type="text"
                value={inputValue}
                onChange={(e) => handleInputChange(e.target.value)}
                onFocus={() => setShowSuggestions(inputValue.length >= 2)}
                onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: UUEE"
                maxLength={4}
                disabled={loading}
                style={{ 
                  borderColor: localError ? '#ff6b6b' : '#1a6fc4' 
                }}
              />
              
              {showSuggestions && suggestions.length > 0 && (
                <SuggestionsList>
                  {suggestions.map((airport) => (
                    <SuggestionItem
                      key={airport.icao}
                      onMouseDown={(e) => e.preventDefault()}
                      onClick={() => handleSuggestionClick(airport.icao)}
                    >
                      <strong>{airport.icao}</strong> - {airport.name}
                    </SuggestionItem>
                  ))}
                </SuggestionsList>
              )}
            </div>
            
            <SearchButton 
              type="submit" 
              disabled={loading}
            >
              {loading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîç –ü–æ–∏—Å–∫'}
            </SearchButton>
          </InputGroup>

          {localError && (
            <div style={{ 
              color: '#ff6b6b', 
              fontSize: '0.9rem', 
              textAlign: 'center',
              marginTop: '10px'
            }}>
              {localError}
            </div>
          )}
        </form>

        <div style={{ textAlign: 'center', margin: '15px 0' }}>
          <ModalButton 
            type="button"
            onClick={() => setShowModal(true)}
            disabled={loading}
          >
            üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
          </ModalButton>
        </div>

        {recentAirports.length > 0 && (
          <RecentAirports>
            <span>–ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã: </span>
            {recentAirports.map((code) => (
              <RecentButton
                key={code}
                type="button"
                onClick={() => handleRecentClick(code)}
                disabled={loading}
              >
                ‚úàÔ∏è {code}
              </RecentButton>
            ))}
          </RecentAirports>
        )}
      </SelectorContainer>

      <AirportModal
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        onSelect={handleModalSelect}
      />
    </>
  );
};