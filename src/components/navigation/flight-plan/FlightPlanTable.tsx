import React from 'react';
import { 
  TableContainer, 
  Table, 
  TableHeader, 
  TableRow, 
  TableCell,
  Input,
  AddButton,
  RemoveButton,
  SummaryRow,
  ControlPanel
} from './FlightPlanTable.styles';
import type { RouteLeg, CalculatedLeg } from './types';
import { calculateRoute } from './routeCalculator';

interface FlightPlanTableProps {
  legs: RouteLeg[];
  onLegsChange: (legs: RouteLeg[]) => void;
  trueAirspeed: number;
  windDirection: number;
  windSpeed: number;
}

export const FlightPlanTable: React.FC<FlightPlanTableProps> = ({
  legs,
  onLegsChange,
  trueAirspeed,
  windDirection,
  windSpeed
}) => {
  const calculatedLegs: CalculatedLeg[] = calculateRoute(legs, trueAirspeed, windDirection, windSpeed);

  const handleLegChange = (index: number, field: keyof RouteLeg, value: string | number) => {
    const newLegs = [...legs];
    newLegs[index] = { ...newLegs[index], [field]: value };
    onLegsChange(newLegs);
  };

  const addLeg = () => {
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–∞–¥–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
    const landingIndex = legs.length - 1;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ü–ü–ú
    const newLeg: RouteLeg = {
      id: Date.now().toString(),
      name: `–ü–ü–ú${legs.length - 1}`, // -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å—á–∏—Ç–∞–µ–º –í–∑–ª–µ—Ç –∏ –ü–æ—Å–∞–¥–∫—É
      magneticCourse: 0,
      distance: 0
    };
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ü–ü–ú –ø–µ—Ä–µ–¥ –ø–æ—Å–∞–¥–∫–æ–π
    const newLegs = [...legs];
    newLegs.splice(landingIndex, 0, newLeg);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ü–ü–ú
    const updatedLegs = newLegs.map((leg, index) => {
      if (index === 0) return { ...leg, name: '–í–∑–ª–µ—Ç' }; // –ü–µ—Ä–≤—ã–π - –≤—Å–µ–≥–¥–∞ –í–∑–ª–µ—Ç
      if (index === newLegs.length - 1) return { ...leg, name: '–ü–æ—Å–∞–¥–∫–∞' }; // –ü–æ—Å–ª–µ–¥–Ω–∏–π - –≤—Å–µ–≥–¥–∞ –ü–æ—Å–∞–¥–∫–∞
      return { ...leg, name: `–ü–ü–ú${index}` }; // –û—Å—Ç–∞–ª—å–Ω—ã–µ - –ü–ü–ú1, –ü–ü–ú2...
    });
    
    onLegsChange(updatedLegs);
  };

  const removeLeg = (index: number) => {
    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –í–∑–ª–µ—Ç –∏ –ü–æ—Å–∞–¥–∫—É, —Ç–æ–ª—å–∫–æ –ü–ü–ú –º–µ–∂–¥—É –Ω–∏–º–∏
    if (index > 0 && index < legs.length - 1) {
      const newLegs = legs.filter((_, i) => i !== index);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ü–ü–ú
      const updatedLegs = newLegs.map((leg, i) => {
        if (i === 0) return { ...leg, name: '–í–∑–ª–µ—Ç' };
        if (i === newLegs.length - 1) return { ...leg, name: '–ü–æ—Å–∞–¥–∫–∞' };
        return { ...leg, name: `–ü–ü–ú${i}` };
      });
      
      onLegsChange(updatedLegs);
    }
  };

  const totalDistance = calculatedLegs.reduce((sum, leg) => sum + leg.distance, 0);
  const totalTime = calculatedLegs.reduce((sum, leg) => sum + leg.legTime, 0);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞
  const getPointColor = (index: number) => {
    if (index === 0) return '#64ffda'; // –í–∑–ª–µ—Ç - –±–∏—Ä—é–∑–æ–≤—ã–π
    if (index === legs.length - 1) return '#ff6b6b'; // –ü–æ—Å–∞–¥–∫–∞ - –∫—Ä–∞—Å–Ω—ã–π
    return '#e6f1ff'; // –ü–ü–ú - –±–µ–ª—ã–π
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç
  const canRemovePoint = (index: number) => {
    return index > 0 && index < legs.length - 1; // –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ü–ü–ú
  };

  return (
    <TableContainer>
      <ControlPanel>
        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>
          <div>
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–ü–ú: {Math.max(0, legs.length - 2)}</label>
          </div>
          <AddButton onClick={addLeg}>+ –î–æ–±–∞–≤–∏—Ç—å –ü–ü–ú</AddButton>
        </div>
      </ControlPanel>

      <Table>
        <thead>
          <TableRow>
            <TableHeader>–ú–∞—Ä—à—Ä—É—Ç</TableHeader>
            <TableHeader>–ú–ü–£</TableHeader>
            <TableHeader>–£–°</TableHeader>
            <TableHeader>–ú–ö</TableHeader>
            <TableHeader>V</TableHeader>
            <TableHeader>W</TableHeader>
            <TableHeader>S</TableHeader>
            <TableHeader>t</TableHeader>
            <TableHeader>–î–µ–π—Å—Ç–≤–∏—è</TableHeader>
          </TableRow>
        </thead>
        <tbody>
          {legs.map((leg, index) => (
            <TableRow key={leg.id}>
              <TableCell>
                <span style={{ 
                  fontWeight: 'bold', 
                  color: getPointColor(index) 
                }}>
                  {leg.name}
                </span>
              </TableCell>
              <TableCell>
                <Input
                  type="number"
                  min="0"
                  max="360"
                  value={leg.magneticCourse}
                  onChange={(e) => handleLegChange(index, 'magneticCourse', Number(e.target.value))}
                  style={{ width: '60px' }}
                />¬∞
              </TableCell>
              <TableCell style={{ 
                color: calculatedLegs[index]?.driftAngle > 0 ? '#ff6b6b' : '#64ffda',
                fontWeight: 'bold'
              }}>
                {calculatedLegs[index]?.driftAngle > 0 ? '+' : ''}{calculatedLegs[index]?.driftAngle.toFixed(0)}¬∞
              </TableCell>
              <TableCell style={{ fontWeight: 'bold' }}>
                {calculatedLegs[index]?.magneticHeading.toFixed(0)}¬∞
              </TableCell>
              <TableCell>{trueAirspeed}</TableCell>
              <TableCell style={{ fontWeight: 'bold' }}>
                {calculatedLegs[index]?.groundSpeed.toFixed(0)}
              </TableCell>
              <TableCell>
                <Input
                  type="number"
                  min="0"
                  value={leg.distance}
                  onChange={(e) => handleLegChange(index, 'distance', Number(e.target.value))}
                  style={{ width: '60px' }}
                /> –∫–º
              </TableCell>
              <TableCell style={{ fontWeight: 'bold' }}>
                {calculatedLegs[index]?.legTime.toFixed(0)} –º–∏–Ω
              </TableCell>
              <TableCell>
                {canRemovePoint(index) && (
                  <RemoveButton onClick={() => removeLeg(index)}>
                    ‚úï
                  </RemoveButton>
                )}
              </TableCell>
            </TableRow>
          ))}
        </tbody>
        <tfoot>
          <SummaryRow>
            <TableCell colSpan={6} style={{ textAlign: 'right', fontWeight: 'bold' }}>
              –ò—Ç–æ–≥–æ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É:
            </TableCell>
            <TableCell style={{ fontWeight: 'bold' }}>
              {totalDistance.toFixed(0)} –∫–º
            </TableCell>
            <TableCell style={{ fontWeight: 'bold' }}>
              {totalTime.toFixed(0)} –º–∏–Ω
            </TableCell>
            <TableCell></TableCell>
          </SummaryRow>
        </tfoot>
      </Table>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ç—Ä–µ */}
      <div style={{ 
        marginTop: '1rem',
        padding: '1rem',
        background: 'rgba(100, 255, 218, 0.05)',
        borderRadius: '6px',
        border: '1px solid rgba(100, 255, 218, 0.2)',
        textAlign: 'center',
        color: '#8892b0',
        fontSize: '0.9rem'
      }}>
        <strong>üå¨Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Ç—Ä–∞ –¥–ª—è –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:</strong> 
        –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {windDirection}¬∞ (–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π - –æ—Ç–∫—É–¥–∞ –¥—É–µ—Ç), –°–∫–æ—Ä–æ—Å—Ç—å: {windSpeed} –∫–º/—á
        <div style={{ marginTop: '0.5rem', fontSize: '0.8rem' }}>
          <strong>üí° –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞:</strong> 
          <span style={{ color: '#64ffda' }}> –í–∑–ª–µ—Ç</span> ‚Üí 
          <span style={{ color: '#e6f1ff' }}> –ü–ü–ú</span> ‚Üí 
          <span style={{ color: '#ff6b6b' }}> –ü–æ—Å–∞–¥–∫–∞</span>
        </div>
      </div>
    </TableContainer>
  );
};