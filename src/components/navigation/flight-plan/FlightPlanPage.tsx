// components/navigation/flight-plan/FlightPlanPage.tsx
// [–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø]
import React, { useState } from 'react';
import { Container } from './FlightPlanPage.styles';
import { FlightPlanTable } from './FlightPlanTable';
import { RouteVisualization } from './visualization/RouteVisualization';
import { TrainingRoutesPanel } from './TrainingRoutesPanel';
import { RouteBuilder } from './route-builder/RouteBuilder';
import { RouteBuilderProvider } from './route-builder/contexts';
import type { RouteLeg } from './types';
import { trainingRoutes } from './trainingRoutes';

export const FlightPlanPage: React.FC = () => {
  const [legs, setLegs] = useState<RouteLeg[]>([
    {
      id: '1',
      name: '–í–∑–ª–µ—Ç',
      magneticCourse: 0,
      distance: 0
    },
    {
      id: '2', 
      name: '–ü–ü–ú1',
      magneticCourse: 0,
      distance: 0
    },
    {
      id: '3',
      name: '–ü–æ—Å–∞–¥–∫–∞',
      magneticCourse: 0,
      distance: 0
    }
  ]);

  const [trueAirspeed, setTrueAirspeed] = useState(200);
  const [windDirection, setWindDirection] = useState(0);
  const [windSpeed, setWindSpeed] = useState(0);
  const [takeoffTime, setTakeoffTime] = useState('08:00');
  const [selectedRoute, setSelectedRoute] = useState<string>('');
  const [showRouteBuilder, setShowRouteBuilder] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
  const handleRouteCreated = (newLegs: RouteLeg[]) => {
    setLegs(newLegs);
    setShowRouteBuilder(false);
    setSelectedRoute(''); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ–±–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  const loadTrainingRoute = (routeCode: string) => {
    const route = trainingRoutes.find(r => r.code === routeCode);
    if (route) {
      setLegs(route.legs);
      setSelectedRoute(routeCode);
      setShowRouteBuilder(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
    }
  };

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–æ–∑–¥—É—à–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ (0-900 –∫–º/—á)
  const handleAirspeedChange = (value: number) => {
    const maxAirspeed = 900;
    if (value > maxAirspeed) {
      setTrueAirspeed(maxAirspeed);
    } else if (value < 0) {
      setTrueAirspeed(0);
    } else {
      setTrueAirspeed(value);
    }
  };

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ (0-359¬∞)
  const handleWindDirectionChange = (value: number) => {
    let correctedValue = value;
    if (correctedValue < 0) correctedValue = 0;
    if (correctedValue > 359) correctedValue = 359;
    if (isNaN(correctedValue)) correctedValue = 0;
    setWindDirection(correctedValue);
  };

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ (0+ –∫–º/—á)
  const handleWindSpeedChange = (value: number) => {
    setWindSpeed(Math.max(0, value));
  };

  return (
    <Container>
      <h2>üß≠ –†–∞—Å—á–µ—Ç –†–ü–ü (–®—Ç—É—Ä–º–∞–Ω—Å–∫–∏–π –ë–æ—Ä—Ç–æ–≤–æ–π –ñ—É—Ä–Ω–∞–ª)</h2>
      <p>–ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª–µ—Ç–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—á–∞—Å—Ç–∫–∞–º–∏</p>

      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ */}
      {!showRouteBuilder && (
        <div style={{ 
          textAlign: 'center', 
          marginBottom: '2rem' 
        }}>
          <button
            onClick={() => setShowRouteBuilder(true)}
            style={{
              padding: '1.2rem 2.5rem',
              background: 'linear-gradient(135deg, #1a6fc4 0%, #64ffda 100%)',
              color: '#0a192f',
              border: 'none',
              borderRadius: '12px',
              fontSize: '1.1rem',
              fontWeight: '700',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'inline-flex',
              alignItems: 'center',
              gap: '0.75rem',
              boxShadow: '0 4px 15px rgba(100, 255, 218, 0.3)'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.transform = 'translateY(-3px)';
              e.currentTarget.style.boxShadow = '0 8px 25px rgba(100, 255, 218, 0.4)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 4px 15px rgba(100, 255, 218, 0.3)';
            }}
          >
            <span style={{ fontSize: '1.4rem' }}>üó∫Ô∏è</span>
            –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤
          </button>
          
          <div style={{ 
            marginTop: '1rem', 
            color: '#8892b0',
            fontSize: '0.9rem'
          }}>
            –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å –ø–æ–º–æ—â—å—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
          </div>
        </div>
      )}

      {/* –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ */}
      {showRouteBuilder ? (
        <RouteBuilderProvider>
          <RouteBuilder 
            onRouteCreated={handleRouteCreated}
            onClose={() => setShowRouteBuilder(false)}
          />
        </RouteBuilderProvider>
      ) : (
        /* –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –†–ü–ü */
        <>
          {/* –ü–∞–Ω–µ–ª—å —É—á–µ–±–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ */}
          <TrainingRoutesPanel 
            onRouteSelect={loadTrainingRoute}
            selectedRoute={selectedRoute}
            currentAirspeed={trueAirspeed}
          />

          {/* –ü–∞–Ω–µ–ª—å –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */}
          <div style={{ 
            background: 'rgba(26, 111, 196, 0.1)',
            padding: '1.5rem',
            borderRadius: '12px',
            marginBottom: '2rem',
            border: '1px solid rgba(26, 111, 196, 0.3)'
          }}>
            <h3 style={{ color: '#64ffda', marginBottom: '1rem', textAlign: 'center' }}>
              –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞
            </h3>
            
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
              gap: '1rem',
              maxWidth: '800px',
              margin: '0 auto'
            }}>
              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', color: '#e6f1ff' }}>
                  –í–æ–∑–¥—É—à–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å V (–∫–º/—á):
                </label>
                <input
                  type="number"
                  value={trueAirspeed}
                  onChange={(e) => handleAirspeedChange(Number(e.target.value))}
                  onBlur={(e) => handleAirspeedChange(Number(e.target.value))}
                  min="0"
                  max="900"
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    background: 'rgba(10, 25, 47, 0.6)',
                    border: '1px solid #1a6fc4',
                    borderRadius: '6px',
                    color: '#e6f1ff',
                    fontSize: '1rem'
                  }}
                />
                <div style={{ fontSize: '0.8rem', color: '#8892b0', marginTop: '0.25rem' }}>
                  –ú–∞–∫—Å: 900 –∫–º/—á ‚Ä¢ –í—Ä–µ–º—è –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                </div>
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', color: '#e6f1ff' }}>
                  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ (–≥—Ä–∞–¥—É—Å—ã):
                </label>
                <input
                  type="number"
                  min="0"
                  max="359"
                  value={windDirection}
                  onChange={(e) => handleWindDirectionChange(Number(e.target.value))}
                  onBlur={(e) => handleWindDirectionChange(Number(e.target.value))}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    background: 'rgba(10, 25, 47, 0.6)',
                    border: '1px solid #1a6fc4',
                    borderRadius: '6px',
                    color: '#e6f1ff',
                    fontSize: '1rem'
                  }}
                />
                <div style={{ fontSize: '0.8rem', color: '#8892b0', marginTop: '0.25rem' }}>
                  –î–∏–∞–ø–∞–∑–æ–Ω: 0-359¬∞
                </div>
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', color: '#e6f1ff' }}>
                  –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–∫–º/—á):
                </label>
                <input
                  type="number"
                  min="0"
                  value={windSpeed}
                  onChange={(e) => handleWindSpeedChange(Number(e.target.value))}
                  onBlur={(e) => handleWindSpeedChange(Number(e.target.value))}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    background: 'rgba(10, 25, 47, 0.6)',
                    border: '1px solid #1a6fc4',
                    borderRadius: '6px',
                    color: '#e6f1ff',
                    fontSize: '1rem'
                  }}
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '0.5rem', color: '#e6f1ff' }}>
                  –í—Ä–µ–º—è –≤–∑–ª–µ—Ç–∞:
                </label>
                <input
                  type="time"
                  value={takeoffTime}
                  onChange={(e) => setTakeoffTime(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    background: 'rgba(10, 25, 47, 0.6)',
                    border: '1px solid #1a6fc4',
                    borderRadius: '6px',
                    color: '#e6f1ff',
                    fontSize: '1rem'
                  }}
                />
              </div>
            </div>
          </div>

          {/* –¢–∞–±–ª–∏—Ü–∞ –†–ü–ü */}
          <FlightPlanTable
            legs={legs}
            onLegsChange={setLegs}
            trueAirspeed={trueAirspeed}
            windDirection={windDirection}
            windSpeed={windSpeed}
            takeoffTime={takeoffTime}
          />

          {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ */}
          <RouteVisualization
            legs={legs.map((leg) => ({
              name: leg.name,
              magneticHeading: leg.magneticCourse,
              distance: leg.distance,
              driftAngle: 0,
              groundSpeed: trueAirspeed,
              legTime: leg.distance > 0 ? (leg.distance / trueAirspeed) * 60 : 0
            }))}
            windDirection={windDirection}
            windSpeed={windSpeed}
          />

          <div style={{ 
            marginTop: '2rem',
            padding: '1rem',
            background: 'rgba(100, 255, 218, 0.1)',
            borderRadius: '8px',
            border: '1px solid rgba(100, 255, 218, 0.3)',
            fontSize: '0.9rem',
            color: '#8892b0'
          }}>
            <strong>üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong>
            <ul style={{ margin: '0.5rem 0', paddingLeft: '1.5rem' }}>
              <li>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞</li>
              <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–æ–∑–¥—É—à–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å V (–º–∞–∫—Å. 900 –∫–º/—á)</li>
              <li>–ó–∞–¥–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ (0-359¬∞) –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞</li>
              <li>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤–∑–ª–µ—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–ª–µ—Ç–∞ –ü–ü–ú</li>
              <li>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –£–°, –ú–ö, W –∏ –≤—Ä–µ–º—è</li>
              <li>–ú–∞—Ä—à—Ä—É—Ç: <strong>–í–∑–ª–µ—Ç ‚Üí –ü–ü–ú1 ‚Üí –ü–ü–ú2 ‚Üí ... ‚Üí –ü–æ—Å–∞–¥–∫–∞</strong></li>
              <li><span style={{ color: '#ff6b6b' }}>–£–°+</span> - –ø—Ä–∞–≤—ã–π —Å–Ω–æ—Å, <span style={{ color: '#64ffda' }}>–£–°-</span> - –ª–µ–≤—ã–π —Å–Ω–æ—Å</li>
            </ul>
          </div>
        </>
      )}
    </Container>
  );
};