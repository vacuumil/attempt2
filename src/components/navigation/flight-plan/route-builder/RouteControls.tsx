// components/navigation/flight-plan/route-builder/RouteControls.tsx
import React from 'react';
import {
  ControlsContainer,
  ControlsHeader,
  ButtonGroup,
  PrimaryButton,
  SecondaryButton,
  DangerButton,
  RouteStats,
  StatsGrid,
  StatItem,
  QuickActions,
  QuickActionButton,
  WarningMessage,
  ControlGroup,
  RouteVisualization
} from './RouteControls.styles';
import { calculateRouteLegs, calculateTotalDistance, generateRouteFromWaypoints } from './utils/calculations';
import { formatDistance } from './utils/helpers';
import type { Waypoint, RouteLeg } from '../types';

interface RouteControlsProps {
  selectedWaypoints: Waypoint[];
  onRouteCreate: (legs: RouteLeg[]) => void;
  onClearRoute: () => void;
  onClose: () => void;
  onWaypointReorder?: (waypoints: Waypoint[]) => void;
}

export const RouteControls: React.FC<RouteControlsProps> = ({
  selectedWaypoints,
  onRouteCreate,
  onClearRoute,
  onClose,
  onWaypointReorder
}) => {
  const routeLegs = calculateRouteLegs(selectedWaypoints);
  const totalDistance = calculateTotalDistance(selectedWaypoints);
  const totalTime = routeLegs.reduce((sum, leg) => sum + leg.time, 0);

  const canCreateRoute = selectedWaypoints.length >= 2;

  const handleRouteCreate = () => {
    if (!canCreateRoute) return;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const legs = generateRouteFromWaypoints(selectedWaypoints);
    onRouteCreate(legs);
  };

  const handleMoveWaypoint = (index: number, direction: 'up' | 'down') => {
    if (!onWaypointReorder) return;
    
    const newWaypoints = [...selectedWaypoints];
    if (direction === 'up' && index > 0) {
      [newWaypoints[index - 1], newWaypoints[index]] = [newWaypoints[index], newWaypoints[index - 1]];
    } else if (direction === 'down' && index < newWaypoints.length - 1) {
      [newWaypoints[index], newWaypoints[index + 1]] = [newWaypoints[index + 1], newWaypoints[index]];
    }
    onWaypointReorder(newWaypoints);
  };

  const handleRemoveWaypoint = (index: number) => {
    if (!onWaypointReorder) return;
    const newWaypoints = selectedWaypoints.filter((_, i) => i !== index);
    onWaypointReorder(newWaypoints);
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è bearing
  const formatBearing = (bearing: number): string => {
    return `${bearing.toFixed(0)}¬∞`;
  };

  return (
    <ControlsContainer>
      <ControlsHeader>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–º</ControlsHeader>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ */}
      <RouteStats>
        <StatsGrid>
          <StatItem>
            <span className="value">{selectedWaypoints.length}</span>
            <span className="label">–¢–æ—á–µ–∫</span>
          </StatItem>
          <StatItem>
            <span className="value">{selectedWaypoints.length - 1}</span>
            <span className="label">–£—á–∞—Å—Ç–∫–æ–≤</span>
          </StatItem>
          <StatItem>
            <span className="value">{formatDistance(totalDistance)}</span>
            <span className="label">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</span>
          </StatItem>
          <StatItem>
            <span className="value">{Math.round(totalTime)}</span>
            <span className="label">–ú–∏–Ω—É—Ç</span>
          </StatItem>
        </StatsGrid>
      </RouteStats>

      {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ */}
      {selectedWaypoints.length > 1 && (
        <RouteVisualization>
          <div className="route-path">
            {selectedWaypoints.map((waypoint, index) => (
              <div key={waypoint.id} className="route-point">
                <div className="point-number">{index + 1}</div>
                <div className="point-info">
                  <div className="point-name">{waypoint.name}</div>
                  <div className="point-code">{waypoint.code}</div>
                </div>
                {index < selectedWaypoints.length - 1 && (
                  <div className="route-leg">
                    <div className="leg-distance">{routeLegs[index]?.distance} –∫–º</div>
                    <div className="leg-arrow">‚Üí</div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </RouteVisualization>
      )}

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–º —Ç–æ—á–µ–∫ */}
      {selectedWaypoints.length > 0 && (
        <ControlGroup>
          <label style={{ color: '#64ffda', fontWeight: 'bold', marginBottom: '0.75rem' }}>
            üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞:
          </label>
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column',
            gap: '0.5rem',
            maxHeight: '200px',
            overflowY: 'auto'
          }}>
            {selectedWaypoints.map((waypoint, index) => (
              <div key={waypoint.id} style={{
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem',
                padding: '0.75rem',
                background: 'rgba(17, 34, 64, 0.6)',
                borderRadius: '8px',
                border: '1px solid rgba(100, 255, 218, 0.2)',
                transition: 'all 0.3s ease'
              }}>
                <div style={{
                  background: 'linear-gradient(135deg, #64ffda 0%, #1a6fc4 100%)',
                  color: '#0a192f',
                  width: '28px',
                  height: '28px',
                  borderRadius: '50%',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '0.9rem',
                  fontWeight: 'bold',
                  flexShrink: 0
                }}>
                  {index + 1}
                </div>
                
                <div style={{ flex: 1, minWidth: 0 }}>
                  <div style={{ 
                    color: '#e6f1ff', 
                    fontSize: '0.9rem',
                    fontWeight: '500',
                    whiteSpace: 'nowrap',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis'
                  }}>
                    {waypoint.name}
                  </div>
                  <div style={{ 
                    color: '#8892b0', 
                    fontSize: '0.8rem',
                    whiteSpace: 'nowrap',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis'
                  }}>
                    {waypoint.code} ‚Ä¢ {formatBearing(waypoint.coordinates.bearing)} / {formatDistance(waypoint.coordinates.distance)}
                  </div>
                </div>

                <div style={{ display: 'flex', gap: '0.3rem', flexShrink: 0 }}>
                  <QuickActionButton
                    onClick={() => handleMoveWaypoint(index, 'up')}
                    disabled={index === 0}
                    style={{ 
                      padding: '0.3rem 0.5rem',
                      fontSize: '0.8rem',
                      opacity: index === 0 ? 0.3 : 1
                    }}
                    title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
                  >
                    ‚Üë
                  </QuickActionButton>
                  <QuickActionButton
                    onClick={() => handleMoveWaypoint(index, 'down')}
                    disabled={index === selectedWaypoints.length - 1}
                    style={{ 
                      padding: '0.3rem 0.5rem',
                      fontSize: '0.8rem',
                      opacity: index === selectedWaypoints.length - 1 ? 0.3 : 1
                    }}
                    title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
                  >
                    ‚Üì
                  </QuickActionButton>
                  <QuickActionButton
                    onClick={() => handleRemoveWaypoint(index)}
                    style={{ 
                      padding: '0.3rem 0.5rem',
                      fontSize: '0.8rem',
                      background: 'rgba(255, 107, 107, 0.1)',
                      borderColor: '#ff6b6b',
                      color: '#ff6b6b'
                    }}
                    title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞"
                  >
                    ‚úï
                  </QuickActionButton>
                </div>
              </div>
            ))}
          </div>
        </ControlGroup>
      )}

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <QuickActions>
        <QuickActionButton 
          onClick={onClearRoute}
          disabled={selectedWaypoints.length === 0}
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
        </QuickActionButton>
      </QuickActions>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <ButtonGroup>
        <SecondaryButton onClick={onClose}>
          ‚Üê –ù–∞–∑–∞–¥ –∫ –†–ü–ü
        </SecondaryButton>
        
        <DangerButton 
          onClick={onClearRoute}
          disabled={selectedWaypoints.length === 0}
        >
          –û—á–∏—Å—Ç–∏—Ç—å
        </DangerButton>

        <PrimaryButton 
          onClick={handleRouteCreate}
          disabled={!canCreateRoute}
          title={!canCreateRoute ? '–î–æ–±–∞–≤—å—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞' : '–°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏'}
        >
          üöÄ –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
        </PrimaryButton>
      </ButtonGroup>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      {selectedWaypoints.length === 0 && (
        <WarningMessage>
          <strong>üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –ø—É—Å—Ç</strong>
          –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        </WarningMessage>
      )}

      {selectedWaypoints.length === 1 && (
        <WarningMessage>
          <strong>‚ûï –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ç–æ—á–∫–∏</strong>
          –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏
        </WarningMessage>
      )}

      {selectedWaypoints.length >= 2 && (
        <div style={{ 
          marginTop: '1rem',
          padding: '1rem',
          background: 'linear-gradient(135deg, rgba(100, 255, 218, 0.1) 0%, rgba(26, 111, 196, 0.1) 100%)',
          border: '1px solid rgba(100, 255, 218, 0.3)',
          borderRadius: '8px',
          textAlign: 'center'
        }}>
          <div style={{ color: '#64ffda', fontWeight: 'bold', fontSize: '1.1rem', marginBottom: '0.5rem' }}>
            üéØ –ú–∞—Ä—à—Ä—É—Ç –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é!
          </div>
          <div style={{ color: '#e6f1ff', fontSize: '0.9rem' }}>
            {selectedWaypoints.length} —Ç–æ—á–µ–∫ ‚Ä¢ {formatDistance(totalDistance)} ‚Ä¢ ~{Math.round(totalTime)} –º–∏–Ω—É—Ç
          </div>
          <div style={{ 
            color: '#8892b0', 
            fontSize: '0.8rem', 
            marginTop: '0.5rem',
            fontStyle: 'italic'
          }}>
            –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤ –†–ü–ü
          </div>
        </div>
      )}
    </ControlsContainer>
  );
};