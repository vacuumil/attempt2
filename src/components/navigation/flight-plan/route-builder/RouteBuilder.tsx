// components/navigation/flight-plan/route-builder/RouteBuilder.tsx
import React, { useState } from 'react';
import {
  BuilderContainer,
  BuilderHeader,
  BuilderContent,
  MapSection,
  ControlsSection,
  LoadingOverlay,
  SuccessMessage,
  TutorialSteps,
  MobileWarning,
  BuilderFooter,
  FeatureHighlight
} from './RouteBuilder.styles';
import { RouteMap } from './RouteMap';
import { WaypointList } from './WaypointList';
import { RouteControls } from './RouteControls';
import { RouteCalculator } from './RouteCalculator';
import { generateRouteFromWaypoints } from './utils/calculations';
import type { Waypoint, RouteLeg } from '../types';

interface RouteBuilderProps {
  onRouteCreated: (legs: RouteLeg[]) => void;
  onClose: () => void;
}

export const RouteBuilder: React.FC<RouteBuilderProps> = ({ onRouteCreated, onClose }) => {
  const [selectedWaypoints, setSelectedWaypoints] = useState<Waypoint[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [calculatedRoute, setCalculatedRoute] = useState<RouteLeg[]>([]);

  const handleWaypointSelect = (waypoint: Waypoint) => {
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ü–ú:', waypoint);
  };

  const handleWaypointAdd = (waypoint: Waypoint) => {
    if (selectedWaypoints.find(wp => wp.id === waypoint.id)) {
      return;
    }
    const newWaypoints = [...selectedWaypoints, waypoint];
    setSelectedWaypoints(newWaypoints);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—á–µ–∫
    if (newWaypoints.length >= 2) {
      const legs = generateRouteFromWaypoints(newWaypoints);
      setCalculatedRoute(legs);
    }
  };

  const handleWaypointRemove = (waypointId: string) => {
    const newWaypoints = selectedWaypoints.filter(wp => wp.id !== waypointId);
    setSelectedWaypoints(newWaypoints);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
    if (newWaypoints.length >= 2) {
      const legs = generateRouteFromWaypoints(newWaypoints);
      setCalculatedRoute(legs);
    } else {
      setCalculatedRoute([]);
    }
  };

  const handleWaypointReorder = (newWaypoints: Waypoint[]) => {
    setSelectedWaypoints(newWaypoints);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
    if (newWaypoints.length >= 2) {
      const legs = generateRouteFromWaypoints(newWaypoints);
      setCalculatedRoute(legs);
    }
  };

  const handleClearRoute = () => {
    setSelectedWaypoints([]);
    setCalculatedRoute([]);
  };

  const handleRouteCreate = async () => {
    if (selectedWaypoints.length < 2) {
      alert('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏');
      return;
    }

    setIsLoading(true);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const legs = generateRouteFromWaypoints(selectedWaypoints);

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    setIsLoading(false);
    setShowSuccess(true);
    
    // –ü–µ—Ä–µ–¥–∞—á–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      onRouteCreated(legs);
    }, 2000);
  };

  if (isLoading) {
    return (
      <LoadingOverlay>
        <div className="spinner"></div>
        <p>–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...</p>
        <p style={{ fontSize: '0.9rem', color: '#8892b0', marginTop: '0.5rem' }}>
          –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª–µ—Ç–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        </p>
      </LoadingOverlay>
    );
  }

  return (
    <BuilderContainer>
      <BuilderHeader>
        <h2>üó∫Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤</h2>
        <p>
          –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ–ª–µ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –∫—É—Ä—Å–æ–≤
        </p>
      </BuilderHeader>

      {showSuccess && (
        <SuccessMessage>
          <h3>‚úÖ –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</h3>
          <p>–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—Å—á–µ—Ç—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª–µ—Ç–∞ –≤ –†–ü–ü...</p>
        </SuccessMessage>
      )}

      <MobileWarning>
        <strong>üì± –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</strong>
        –î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞
      </MobileWarning>

      <BuilderContent>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ */}
        <MapSection>
          <FeatureHighlight>
            <div className="icon">üéØ</div>
            <div className="content">
              <strong>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞</strong>
              <p>–í—Å–µ –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ VOR/DME BMK. –ö–ª–∏–∫–∞–π—Ç–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–∞—Ä—à—Ä—É—Ç</p>
            </div>
          </FeatureHighlight>
          
          <RouteMap
            selectedWaypoints={selectedWaypoints}
            onWaypointSelect={handleWaypointSelect}
            onWaypointAdd={handleWaypointAdd}
          />
        </MapSection>

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ü–ü–ú */}
        <ControlsSection>
          <TutorialSteps>
            <h4>üöÄ –ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</h4>
            <ol style={{ 
              margin: 0, 
              paddingLeft: '1.5rem', 
              color: '#8892b0',
              lineHeight: '1.5'
            }}>
              <li style={{ marginBottom: '0.75rem' }}>
                <strong style={{ color: '#e6f1ff' }}>–í—ã–±–µ—Ä–∏—Ç–µ –ü–ü–ú</strong> –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ
              </li>
              <li style={{ marginBottom: '0.75rem' }}>
                <strong style={{ color: '#e6f1ff' }}>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏</strong> –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å"
              </li>
              <li style={{ marginBottom: '0.75rem' }}>
                <strong style={{ color: '#e6f1ff' }}>–£–ø–æ—Ä—è–¥–æ—á–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç</strong> —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
              </li>
              <li>
                <strong style={{ color: '#e6f1ff' }}>–°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç</strong> –∫–æ–≥–¥–∞ –≤—Å–µ —Ç–æ—á–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
              </li>
            </ol>
          </TutorialSteps>

          {/* –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ü–ü–ú */}
          <WaypointList
            selectedWaypoints={selectedWaypoints}
            onWaypointSelect={handleWaypointSelect}
            onWaypointAdd={handleWaypointAdd}
            onWaypointRemove={handleWaypointRemove}
          />

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–º */}
          <RouteControls
            selectedWaypoints={selectedWaypoints}
            onRouteCreate={handleRouteCreate}
            onClearRoute={handleClearRoute}
            onClose={onClose}
            onWaypointReorder={handleWaypointReorder}
          />

          {/* –†–∞—Å—á–µ—Ç –†–ü–ü - –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ –≤–Ω–∏–∑—É */}
          {calculatedRoute.length > 0 && (
            <RouteCalculator
              routeLegs={calculatedRoute}
              selectedWaypoints={selectedWaypoints}
            />
          )}
        </ControlsSection>
      </BuilderContent>

      <BuilderFooter>
        <p>
          <strong>üí° –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</strong> –í—ã–±–∏—Ä–∞–π—Ç–µ –ü–ü–ú —Å —É—á–µ—Ç–æ–º —Ä–µ–ª—å–µ—Ñ–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏, –∑–æ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        </p>
        <p style={{ fontSize: '0.8rem', opacity: 0.7 }}>
          –í—Å–µ –ü–ü–ú —É–∫–∞–∑–∞–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ VOR/DME BMK (–£–ª—å—è–Ω–æ–≤—Å–∫-–ë–∞—Ä–∞—Ç–∞–µ–≤–∫–∞). –†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è —Å —É—á–µ—Ç–æ–º –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è.
        </p>
      </BuilderFooter>
    </BuilderContainer>
  );
};